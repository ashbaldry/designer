// page/Page.js
var Page = class {
  name;
  navbar_item_style = "none";
  bs4_item_style = "none";
  enable_on_load = true;
  page_html;
  updateComponentDropdown() {
    $(".navbar-tab-item").css("display", this.navbar_item_style);
    $(".bs4-item").css("display", this.bs4_item_style);
    const component2 = this.navbar_item_style === "none" ? "header" : "tab";
    if (!$(`#sidebar-${component2}-body`).hasClass("show")) {
      $(`#sidebar-${component2}-header button`).trigger("click");
    }
  }
  getPageHTML(html, title = "") {
    return html.replaceAll("$page_id$", this.getTabID()).replaceAll("$title$", title);
  }
  updatePage() {
    const title = $("#canvas-title").html();
    $(".page-canvas").html(this.getPageHTML(this.page_html, title));
  }
  enableSortablePage(selector, by = "id") {
    if (by === "id") {
      Sortable.create(document.getElementById(selector), {
        group: {
          name: "shared",
          put: function(_to, _from, clone) {
            return !clone.classList.contains("col-sm");
          }
        }
      });
    } else {
      document.getElementsByClassName(selector).forEach((el) => {
        Sortable.create(el, {
          group: {
            name: "shared",
            put: function(_to, _from, clone) {
              return !clone.classList.contains("col-sm");
            }
          }
        });
      });
    }
  }
  getTabID() {
    return Math.round(Math.random() * 8999 + 1e3);
  }
};

// page/BasicPage.js
var BasicPage = class extends Page {
  name = "basicPage";
  enable_on_load = false;
  page_html = '<div id="canvas-page" class="container-fluid dimmed-canvas-page"></div>';
};

// page/FillPage.js
var FillPage = class extends Page {
  name = "fillPage";
  page_html = `
        <div id="canvas-page" class="designer-page-template" 
             data-shinyfunction="fillPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/FixedPage.js
var FixedPage = class extends Page {
  name = "fixedPage";
  page_html = `
        <div id="canvas-page" class="designer-page-template container" 
             data-shinyfunction="fixedPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/FluidPage.js
var FluidPage = class extends Page {
  name = "fluidPage";
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" 
             data-shinyfunction="fluidPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/BootstrapPage.js
var BootstrapPage = class extends Page {
  name = "bootstrapPage";
  page_html = `
    <div id="canvas-page" class="designer-page-template container-fluid" data-shinyfunction="bootstrapPage"
      data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
  `;
};

// page/NavbarPage.js
var NavbarPage = class extends Page {
  name = "navbarPage";
  navbar_item_style = "";
  enable_on_load = false;
  page_html = `
        <div class="designer-page-template">
            <nav class="navbar navbar-default navbar-static-top" role="navigation">
                <div class="container-fluid">
                    <div class="navbar-header">
                        <span class="navbar-brand">$title$</span>
                    </div>
                    <ul class="nav navbar-nav" data-tabsetid="$page_id$"></ul>
                </div>
            </nav>
            <div class="container-fluid navbar-page-tabs">
                <div id="canvas-page" class="tab-content"
                     data-tabsetid="$page_id$" data-shinyfunction="navbarPage"
                     data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
            </div>
        </div>
    `;
};

// page/DashboardPage.js
var DashboardPage = class extends Page {
  name = "dashboardPage";
  navbar_item_style = "";
  bs4_item_style = "";
  enable_on_load = false;
  page_html = `
        <div id="canvas-page" class="wrapper designer-page-template"
             data-shinyfunction="bs4Dash::dashboardPage" data-shinyattributes="title = &quot;$title$&quot;">
            <nav data-fixed="false" class="main-header navbar navbar-expand navbar-light"
                 data-shinyfunction="bs4Dash::dashboardHeader" data-shinyattributes="title = &quot;$title$&quot;">
                <ul class="navbar-nav">
                    <a class="nav-link" data-widget="pushmenu" href="#">
                        <i class="fa fa-bars" role="presentation" aria-label="bars icon"></i>
                    </a>
                </ul>
                <ul class="navbar-nav ml-auto navbar-right"></ul>
            </nav>
            <aside id="sidebarId" data-fixed="true" data-minified="true" data-collapsed="false"
                   data-disable="FALSE" class="main-sidebar sidebar-dark-primary elevation-4"
                   data-shinyfunction="bs4Dash::dashboardSidebar">
                <div class="brand-link">$title$</div>
                <div class="sidebar" id="sidebarItemExpanded">
                    <nav class="mt-2">
                        <ul class="nav nav-pills nav-sidebar flex-column sidebar-menu nav-child-indent"
                            data-widget="treeview" role="menu" data-accordion="true" data-shinyfunction="bs4Dash::sidebarMenu">
                            <div id="tabs_$page_id$" class="sidebarMenuSelectedTabItem"></div>
                        </ul>
                    </nav>
                </div>
            </aside>
            <div class="content-wrapper" data-shinyfunction="bs4Dash::dashboardBody">
                <section class="content">
                    <div class="tab-content"></div>
                </section>
            </div>
        </div>
    `;
};

// app/settings.js
function initSettings() {
  $("#settings-page_type").on("click", () => $(".canvas-modal").css("display", "none"));
  $(".copy-ui-button").on("click", copyUICode);
  $("#css_style").on("change", applyCustomStyle);
  $("#remove_label").on("change", toggleComponentLabels);
  $("#remove_colour").on("change", toggleBackgroundColours);
  $("#remove_border").on("change", toggleBorders);
  $("#canvas_clear").on("click", showClearWarning);
  $("#confirm_clear").on("click", clearCanvas);
  $(".component-accordion .card-header button").on("click", scrollToComponent);
  $("body").on("click", () => {
    if (document.querySelector("body").classList.contains("sidebar-mini")) {
      document.querySelector("body").classList.remove("sidebar-mini");
    }
  });
  $(document).on("click", ".clickable-dropdown", (e) => {
    e.stopPropagation();
  });
  $("#preview").on("click", () => {
    $(".page-canvas-shell").addClass("preview");
  });
  $("#canvas-close_preview").on("click", () => {
    $(".page-canvas-shell").removeClass("preview");
  });
  Shiny.addCustomMessageHandler("toggleBS4DashDeps", toggleBS4DashDeps);
  Shiny.addCustomMessageHandler("runjs", function(message) {
    (0, eval)(message.script);
  });
  $("body").on("click contextmenu", closeCanvasMenu);
  $("#canvas-canvas").on("contextmenu", showCanvasMenu);
  $("#canvas-menu").on("contextmenu", (e) => {
    e.preventDefault();
  });
  $("#sidebar-container").on("mousedown", closeCanvasMenu);
  $("#canvas-delete").on("click", deleteDesignerElement);
  $("#settings-template-search").on("input", toggleSavedTemplates);
  $(".template-option").on("click", sendSavedTemplateID);
}
function toggleComponentLabels() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-after-label");
  } else {
    $(".designer-page-template").addClass("hidden-after-label");
  }
}
function toggleBackgroundColours() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-colour");
  } else {
    $(".designer-page-template").addClass("hidden-colour");
  }
}
function toggleBorders() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-borders");
  } else {
    $(".designer-page-template").addClass("hidden-borders");
  }
}
Shiny.addCustomMessageHandler("prepare_canvas_screenshot", (message) => {
  $(".designer-page-template").addClass("hidden-after-label");
  $(".designer-page-template").addClass("hidden-colour");
  $(".designer-page-template").addClass("hidden-borders");
});
Shiny.addCustomMessageHandler("revert_canvas_screenshot", (message) => {
  $("#remove_label").trigger("change");
  $("#remove_colour").trigger("change");
  $("#remove_border").trigger("change");
});
function showClearWarning() {
  if ($("#canvas-page").html() === "" || $("#canvas-page.wrapper .tab-content").html() === "") {
    return null;
  } else {
    $("#clear_modal").modal();
  }
}
function clearCanvas() {
  $("#canvas-page").html("");
}
function copyUICode() {
  const copyText = document.getElementById("settings-code-code").textContent;
  navigator.clipboard.writeText(copyText);
  $("#copy_toast").toast("show");
}
function toggleBS4DashDeps(toggle) {
  const stylesheets = document.styleSheets;
  for (let i = 0; i < stylesheets.length; i++) {
    const stylesheet = stylesheets.item(i);
    if (stylesheet.href && (stylesheet.href.includes("AdminLTE") || stylesheet.href.includes("bs4Dash"))) {
      stylesheet.disabled = toggle === "hide";
    }
  }
}
function scrollToComponent() {
  const cardHeader = this.closest(".card-header").id;
  setTimeout(() => {
    document.getElementById(cardHeader).scrollIntoView({ behavior: "smooth", block: "start" });
    $(this).trigger("blur");
  }, 250);
}
var selectedElement;
function showCanvasMenu(event) {
  if ($(event.target).closest(".designer-element").length === 0) {
    return;
  }
  event.preventDefault();
  const { clientX: mouseX, clientY: mouseY } = event;
  const { normalizedX, normalizedY } = normalizeMenuPosition(mouseX, mouseY);
  selectedElement = $(event.target).closest(".designer-element");
  $("#canvas-menu").css("top", `${normalizedY}px`);
  $("#canvas-menu").css("left", `${normalizedX}px`);
  $("#canvas-menu").removeClass("visible");
  setTimeout(() => {
    $("#canvas-menu").addClass("visible");
  });
}
function normalizeMenuPosition(mouseX, mouseY) {
  const scope = document.getElementById("canvas-canvas");
  const contextMenu = document.getElementById("canvas-menu");
  let { left: scopeOffsetX, top: scopeOffsetY } = scope.getBoundingClientRect();
  scopeOffsetX = scopeOffsetX < 0 ? 0 : scopeOffsetX;
  scopeOffsetY = scopeOffsetY < 0 ? 0 : scopeOffsetY;
  const scopeX = mouseX - scopeOffsetX;
  const scopeY = mouseY - scopeOffsetY;
  const outOfBoundsOnX = scopeX + contextMenu.clientWidth > scope.clientWidth;
  const outOfBoundsOnY = scopeY + contextMenu.clientHeight > scope.clientHeight;
  let normalizedX = mouseX;
  let normalizedY = mouseY;
  if (outOfBoundsOnX) {
    normalizedX = scopeOffsetX + scope.clientWidth - contextMenu.clientWidth;
  }
  if (outOfBoundsOnY) {
    normalizedY = scopeOffsetY + scope.clientHeight - contextMenu.clientHeight;
  }
  return { normalizedX, normalizedY };
}
function closeCanvasMenu() {
  $("#canvas-menu").removeClass("visible");
}
function deleteDesignerElement(event) {
  selectedElement.remove();
}
function applyCustomStyle(event) {
  const cssFile = event.target.files[0];
  const canvasStyle = document.getElementById("canvas-style");
  canvasStyle.innerHTML = "";
  const reader = new FileReader();
  reader.onload = (e) => {
    const file = e.target.result;
    const lines = file.split(/\r\n|\n|(?<=\}\b)/);
    canvasStyle.innerHTML = lines.join("\n");
    const cssRules = canvasStyle.sheet.cssRules;
    for (let i = 0; i < cssRules.length; i++) {
      if (cssRules[i].selectorText) {
        cssRules[i].selectorText = addCanvasPageSelector(cssRules[i].selectorText);
      } else if (cssRules[i].media && cssRules[i].cssRules) {
        const cssMediaRules = cssRules[i].cssRules;
        for (let j = 0; j < cssMediaRules.length; j++) {
          cssMediaRules[j].selectorText = addCanvasPageSelector(cssMediaRules[j].selectorText);
        }
      }
    }
  };
  reader.onerror = (e) => alert(e.target.error.name);
  reader.readAsText(cssFile);
}
function addCanvasPageSelector(selectors) {
  return selectors.split(/, */g).map((x) => {
    if (x === "body") {
      return "#canvas-page";
    } else if (/^\.wrapper\.sidebar/.test(x)) {
      return x.replace(".wrapper", "");
    } else {
      return "#canvas-page " + x;
    }
  }).join(", ");
}
var template_selected = false;
function selectedTemplate() {
  return template_selected;
}
function templateUpated() {
  template_selected = false;
}
function toggleSavedTemplates(event) {
  const search_term = event.target.value ? event.target.value : "";
  document.getElementsByClassName("template-option").forEach((x) => {
    const show_template = $(x).find(".title").html().includes(search_term) || $(x).find(".description").html().includes(search_term);
    x.style.display = show_template ? null : "none";
  });
}
function sendSavedTemplateID(event) {
  const selected_template = $(event.target).closest(".template-option");
  const page_choice = selected_template.data("page");
  template_selected = true;
  const to_delete = $(event.target).closest(".delete").length > 0 || event.target.classList.contains("delete");
  if (!to_delete) {
    $("#settings-page_type").find(`input[value='${page_choice}']`).trigger("click");
  }
  document.getElementById("settings-template-search").value = null;
  $("#settings-template-search").trigger("input");
  Shiny.setInputValue("settings-template-select", selected_template.data("value"));
  Shiny.setInputValue("settings-template-delete", to_delete);
}

// page/utils.js
var page;
function createPage() {
  const page_type = $("#settings-page_type input:radio:checked").val();
  if (page_type === "basicPage") {
    page = new BasicPage();
  } else if (page_type === "fillPage") {
    page = new FillPage();
  } else if (page_type === "fixedPage") {
    page = new FixedPage();
  } else if (page_type === "fluidPage") {
    page = new FluidPage();
  } else if (page_type === "bootstrapPage") {
    page = new BootstrapPage();
  } else if (page_type === "navbarPage") {
    page = new NavbarPage();
  } else if (page_type === "dashboardPage") {
    page = new DashboardPage();
  } else {
    page = new BasicPage();
  }
  page.updatePage();
  if (page.enable_on_load) {
    page.enableSortablePage("canvas-page");
  }
  page.updateComponentDropdown();
  return page;
}
function selectPage() {
  let button_el = $(this);
  if (!$(this).hasClass("canvas-page-choice")) {
    button_el = $(this).closest(".canvas-page-choice");
  }
  button_el.closest(".canvas-modal").css("display", "none");
  const page_choice = button_el.data("page");
  $("#settings-page_type").find(`input[value='${page_choice}']`).trigger("click");
}
function changePageCheck() {
  if (selectedTemplate()) {
    createPage();
    templateUpated();
    return;
  }
  if ($("#canvas-page").html() === "" || $("#canvas-page.wrapper .tab-content").html() === "") {
    $("#canvas-page").html("<div></div>");
    createPage();
  } else {
    $("#warning_modal").modal();
  }
}
function revertPageSelection() {
  $(`#settings-page_type input[value="${page.name}"]`).trigger("click");
}
function updateTitle(el) {
  const title = $(el.target).val();
  $("#canvas-title").html(title);
  $(".navbar-brand").html(title);
  $(".brand-link").html(title);
  if ($("#canvas-page").data("shinyattributes")) {
    const shiny_atts = $("#canvas-page").data("shinyattributes").replace(/"[^"]+"/, `"${title}"`);
    $("#canvas-page").attr("data-shinyattributes", shiny_atts);
  }
  if ($("#canvas-page>.main-header").data("shinyattributes")) {
    const shiny_atts2 = $("#canvas-page>.main-header").data("shinyattributes").replace(/"[^"]+"/, `"${title}"`);
    $("#canvas-page>.main-header").attr("data-shinyattributes", shiny_atts2);
  }
}

// page/init.js
function initPage() {
  createPage();
  $(".canvas-page-choice").on("click", selectPage);
  $("#settings-page_type").on("change", changePageCheck);
  $("#cancel_reset").on("click", revertPageSelection);
  $("#confirm_reset").on("click", createPage);
  $("#app_name").on("change keyup", updateTitle);
}

// component/Component.js
var component;
var Component = class {
  updatable = true;
  display_comments = true;
  display_container = true;
  has_card_body = false;
  is_tab = false;
  html = "<div></div>";
  sortable_settings = null;
  constructor() {
    component = this;
  }
  createComponent() {
    return this.html;
  }
  replaceHTMLPlaceholders(html, options) {
    for (const property in options) {
      html = html.replaceAll("$" + property + "$", options[property]);
    }
    return html;
  }
  updateComponent(update_sortable = false) {
    if (typeof window === "undefined") {
      return null;
    }
    $(".component-container").html(null);
    const html = this.createComponent();
    $(".component-container").html(html);
    this.addComments();
    if (update_sortable) {
      this.enableSortable();
    }
  }
  enableSortable() {
    Sortable.create(document.getElementById("sidebar-container"), {
      group: {
        name: "shared",
        pull: "clone",
        put: false
      },
      onClone: function(evt) {
        if (component.sortable_settings) {
          if (component.has_card_body) {
            Sortable.create($(evt.item).find(".card-body")[0], component.sortable_settings);
          } else if (component.is_tab) {
            Sortable.create($(evt.item).find(".tab-content"), component.sortable_settings);
          } else {
            Sortable.create(evt.item, component.sortable_settings);
          }
        }
      },
      onEnd: function(_evt) {
        $('.page-canvas [data-toggle="tooltip"]').tooltip();
        if (component.updatable || $("#sidebar-comments").val() !== "") {
          $("#sidebar-comments").val("");
          component.updateComponent();
        }
      }
    });
  }
  addComments() {
    const comments = $("#sidebar-comments").val();
    if (comments) {
      $(".component-container>.designer-element").attr("data-shinycomments", comments);
      $(".component-container>.designer-element").attr("title", comments);
      $(".component-container>.designer-element").attr("data-toggle", "tooltip");
    }
  }
  createID(prefix = "") {
    prefix = prefix ? prefix + "_" : prefix;
    return prefix + Math.random().toString(36).substring(2, 12);
  }
  validateCssUnit(x, fallback) {
    if (this._regex.test(x)) {
      return x;
    } else if (/^\d+$/.test(x)) {
      return x + "px";
    } else {
      return fallback;
    }
  }
  _regex = /^(auto|inherit|fit-content|calc\(.*\)|((\.\d+)|(\d+(\.\d+)?))(%|in|cm|mm|ch|em|ex|rem|pt|pc|px|vh|vw|vmin|vmax))$/;
};

// component/Header.js
var Header = class extends Component {
  html = '<$tag$ class="designer-element" data-shinyfunction="$tag$">$value$</$tag$>';
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const tag = $("#sidebar-header-tag").val();
    const value = $("#sidebar-header-text").val();
    return this.replaceHTMLPlaceholders(this.html, { tag, value });
  }
};

// component/Row.js
var Row = class extends Component {
  updatable = false;
  html = '<div class="designer-element row row-designer" data-shinyfunction="fluidRow"></div>';
  constructor(update_component2 = true) {
    super();
    if (update_component2) {
      this.updateComponent(true);
    }
  }
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return clone.classList.contains("col-sm");
      }
    }
  };
};

// component/Column.js
var Column = class extends Component {
  updatable = false;
  html = '<div class="designer-element col-sm col-sm-$width$$offset_class$" data-shinyfunction="column" data-shinyattributes="width = $width$$offset_r$"></div>';
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return !clone.classList.contains("col-sm");
      }
    }
  };
  constructor(update_component2 = true) {
    super();
    if (update_component2) {
      this.updateComponent(true);
    }
  }
  createComponent() {
    const width = $("#sidebar-column-width_num").val();
    const offset = $("#sidebar-column-offset").val();
    const offset_class = offset > 0 ? ` offset-md-${offset}` : "";
    const offset_r = offset > 0 ? `, offset = ${offset}` : "";
    return this.replaceHTMLPlaceholders(this.html, { width, offset_class, offset_r });
  }
};

// component/Text.js
var Text = class extends Component {
  html = '<$tag$ class="designer-element" data-shinyfunction="tags$$tag$">$value$</$tag$>';
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const tag = $("#sidebar-text-tag").val();
    const value = $("#sidebar-text-textarea").val();
    const contents = tag === "p" ? value.replace(/\n/g, " ") : this.createListItems(value);
    return this.replaceHTMLPlaceholders(this.html, { tag, value: contents });
  }
  createListItems(text) {
    return text.split("\n").map((x) => '<li data-shinyfunction="tags$li">' + x + "</li>").join("");
  }
};

// component/InputPanel.js
var InputPanel = class extends Component {
  updatable = false;
  html = '<div class="designer-element shiny-input-panel shiny-flow-layout" data-shinyfunction="inputPanel"></div>';
  constructor(update_component2 = true) {
    super();
    if (update_component2) {
      this.updateComponent(true);
    }
  }
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return clone.classList.contains("form-group") || clone.classList.contains("btn");
      }
    }
  };
};

// component/Input.js
var Input = class extends Component {
  constructor(type) {
    super();
    this.type = type;
    this.updateComponent(true);
  }
  types = [
    { value: "text_input", label: "Text", r_func: "textInput" },
    { value: "textarea", label: "Textarea", r_func: "textAreaInput" },
    { value: "numeric", label: "Numeric", r_func: "numericInput" },
    { value: "password", label: "Password", r_func: "passwordInput" }
  ];
  html = `
        <div class="designer-element form-group shiny-input-container" 
             $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;label&quot;$width_str$"
             data-shinyfunction="$r_func$"><label class="control-label">$label$</label>$input_tag$</div>
    `;
  createComponent() {
    const label = $(`#sidebar-${this.type}-label`).val();
    let id = $(`#sidebar-${this.type}-id`).val();
    id = id === "" ? this.createID("input") : id;
    const input_info = this.types.find((x) => x.value === this.type);
    if (!input_info)
      return;
    const r_func = input_info.r_func;
    let input_tag;
    if (this.type === "textarea") {
      input_tag = '<textarea class="form-control" placeholder="Textarea input"></textarea>';
    } else {
      input_tag = `<input class="form-control" type="${this.type}" placeholder="${input_info.label} input">`;
    }
    const width = this.validateCssUnit($(`#sidebar-${this.type}-width`).val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      r_func,
      input_tag,
      style_str,
      width_str
    });
  }
};

// component/FileInput.js
var FileInput = class extends Component {
  html = `
        <div class="designer-element form-group shiny-input-container"
             data-shinyfunction="fileInput" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$width_str$">
            <label class="control-label">$label$</label>
            <div class="input-group">
                <label class="input-group-btn input-group-prepend">
                    <span class="btn btn-default btn-file">
                        Browse...
                        <input type="file" style="position: absolute !important; top: -99999px !important; left: -99999px !important;"/>
                    </span>
                </label>
                <input type="text" class="form-control" placeholder="No file selected" readonly="readonly"/>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-file-label").val();
    let id = $("#sidebar-file-id").val();
    id = id === "" ? this.createID("input") : id;
    const width = this.validateCssUnit($("#sidebar-file-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      style_str,
      width_str
    });
  }
};

// component/SelectInput.js
var SelectInput = class extends Component {
  html = `
        <div class="designer-element form-group shiny-input-container" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;, choices = NULL$width_str$"
             data-shinyfunction="selectInput">
             <label class="control-label">$label$</label>
             <div>
                <select>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-dropdown-label").val();
    let id = $("#sidebar-dropdown-id").val();
    id = id === "" ? this.createID("input") : id;
    const width = this.validateCssUnit($("#sidebar-dropdown-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      style_str,
      width_str
    });
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    if (typeof window === "undefined") {
      return null;
    }
    $(".component-container").find("select").selectize({
      labelField: "label",
      valueField: "value",
      searchField: ["label"],
      placeholder: "select input"
    });
  }
};

// component/DateInput.js
var DateInput = class extends Component {
  html = `
        <div class="designer-element form-group shiny-input-container $date_class$" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$width_str$"
             data-shinyfunction="$r_func$">
             <label class="control-label">$label$</label>
             $input_tag$
        </div>
    `;
  date_input_html = `
        <input class="form-control" type="text" title="Date format: yyyy-mm-dd" placeholder="date input"
               data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd"
               data-date-start-view="month" data-date-autoclose="true"/>
    `;
  date_range_input_html = `
        <div class="input-daterange input-group input-group-sm">
            <input class="form-control" type="text" title="Date format: yyyy-mm-dd" placeholder="date input"
                   data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd"
                   data-date-start-view="month" data-date-autoclose="true"/>
            <span class="input-group-addon input-group-prepend input-group-append">
                <span class ="input-group-text"> to </span>
            </span>               
            <input class="form-control" type="text" title="Date format: yyyy-mm-dd" placeholder="date input"
                   data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd"
                   data-date-start-view="month" data-date-autoclose="true"/>        
        </div>       
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-date-label").val();
    let id = $("#sidebar-date-id").val();
    id = id === "" ? this.createID("input") : id;
    const width = this.validateCssUnit($("#sidebar-date-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    const range = document.getElementById("sidebar-date-range").checked;
    const r_func = range ? "dateRangeInput" : "dateInput";
    const date_class = range ? "shiny-date-range-input" : "shiny-date-input";
    const input_tag = range ? this.date_range_input_html : this.date_input_html;
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      r_func,
      date_class,
      input_tag,
      style_str,
      width_str
    });
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    if (typeof window === "undefined") {
      return null;
    }
    $(".component-container").find("input").bsDatepicker();
  }
};

// component/Checkbox.js
var CheckboxInput = class extends Component {
  html = `
      <div class="designer-element form-group shiny-input-container" $style_str$
          data-shinyfunction="checkboxInput"
          data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$width_str$">
          <div class="checkbox">
              <label>
                  <input type="checkbox"><span>$label$</span>
              </label>
          </div>
      </div>
  `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-checkbox-label").val();
    let id = $("#sidebar-checkbox-id").val();
    id = id === "" ? this.createID("checkbox") : id;
    const width = this.validateCssUnit($("#sidebar-checkbox-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      style_str,
      width_str
    });
  }
};

// component/CheckboxGroup.js
var CheckboxGroupInput = class extends Component {
  types = [
    { value: "radio", label: "Radio", r_func: "radioButtons", role: "radiogroup" },
    { value: "checkbox", label: "Checkbox", r_func: "checkboxGroupInput", role: "group" }
  ];
  html = `
        <div class="designer-element form-group shiny-input-container $css_class$" $style_str$
             data-shinyfunction="$r_func$" 
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$choices_str$$inline_str$$width_str$"
             role="$role">
            <label class="control-label">$label$</label>
            <div class="shiny-options-group">
                $choices$
            </div>
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-radio-label").val();
    let id = $("#sidebar-radio-id").val();
    id = id === "" ? this.createID("checkbox") : id;
    const type = $("#sidebar-radio-type").val();
    const input_info = this.types.find((x) => x.value === type);
    if (!input_info)
      return;
    const r_func = input_info.r_func;
    const role = input_info.role;
    const width = this.validateCssUnit($("#sidebar-radio-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    const inline = document.getElementById("sidebar-radio-inline").checked;
    const inline_class = inline ? "-inline" : "";
    const inline_str = inline ? ", inline = TRUE" : "";
    const css_class = `shiny-input-${type}group${inline_class}`;
    const choices = $("#sidebar-radio-choices").val();
    const choices_str = `, choices = c(&quot;${choices.replace(/\n/g, "&quot;, &quot;")}&quot;)`;
    const choices_html = choices.split("\n").map((x) => this.createCheckbox(x, type, inline)).join("");
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      css_class,
      r_func,
      role,
      choices: choices_html,
      choices_str,
      inline_str,
      style_str,
      width_str
    });
  }
  createCheckbox(x, type = "checkbox", inline = false) {
    const check_class = inline ? type + "-inline" : type;
    return `<label class="${check_class}"><input type="${type}"><span>${x}</span></label>`;
  }
};

// component/SliderInput.js
var SliderInput = class extends Component {
  html = `
        <div class="designer-element form-group shiny-input-container" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$value_str$$width_str$"
             data-shinyfunction="sliderInput">
            <label class="control-label">$label$</label>
            <input class="js-range-slider"
                   data-data-type="$format$" data-skin="shiny" data-grid="true" data-grid-num="10"
                   data-grid-snap="false" data-prettifyed-enabled="true" data-prettifyed-separator=","
                   data-keyboard="true" $range_attr$ data-time-format="$time_format$"
                   data-step="$step$" data-min="$min$" data-max="$max$" data-from="$from$">
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-slider-label").val();
    let id = $("#sidebar-slider-id").val();
    id = id === "" ? this.createID("slider") : id;
    const format = $("#sidebar-slider-type").val();
    const width = this.validateCssUnit($("#sidebar-slider-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    const ranged = document.getElementById("sidebar-slider-range").checked;
    const values = this.getValues(format, ranged);
    const range_attr = ranged ? 'data-type="double" data-drag-interval="true" data-to="$to$"' : "";
    return this.replaceHTMLPlaceholders(this.html, {
      range_attr,
      id,
      label,
      format,
      min: values.min,
      max: values.max,
      step: values.step,
      from: values.from,
      to: values.to,
      style_str,
      width_str,
      value_str: values.value_str,
      time_format: values.time_format
    });
  }
  getValues(format, range = false) {
    if (format === "number") {
      return {
        step: 1,
        min: 0,
        max: 10,
        from: 5,
        to: 7,
        value_str: `, min = 0, max = 10, value = ${range ? "c(5, 7)" : 5}`
      };
    }
    const curr_date = new Date();
    if (format === "date") {
      curr_date.setHours(0, 0, 0, 0);
    }
    const curr_time = curr_date.getTime();
    const step = format === "date" ? 1e3 * 60 * 60 * 24 : 1e3;
    const min = curr_time - 5 * step;
    const max = curr_time + 5 * step;
    const from = curr_time;
    const to = curr_time + 2 * step;
    const r_datefunc = format === "date" ? "Sys.Date()" : "Sys.time()";
    const r_mult = format === "date" ? "" : "000";
    const input_value_str = range ? `"c(${r_datefunc}, ${r_datefunc} + 2${r_mult})"` : r_datefunc;
    return {
      step,
      min,
      max,
      from,
      to,
      time_format: format === "date" ? "%F" : "%F %T",
      value_str: `, min = ${r_datefunc} - 5${r_mult}, max = ${r_datefunc} + 5${r_mult}, value = ${input_value_str}`
    };
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    if (typeof window === "undefined") {
      return null;
    }
    const slider_type = $("#sidebar-slider-type").val();
    $(".component-container").find("input").ionRangeSlider({ prettify: this.getSliderPrettifier(slider_type) });
  }
  getSliderPrettifier(type) {
    if (type === "date") {
      return function(num) {
        const sel_date = new Date(num);
        return sel_date.getFullYear() + "-" + (sel_date.getMonth() + 1) + "-" + sel_date.getDate();
      };
    } else if (type === "datetime") {
      return function(num) {
        const sel_date = new Date(num);
        return sel_date.getFullYear() + "-" + (sel_date.getMonth() + 1) + "-" + sel_date.getDate() + " " + sel_date.getHours() + ":" + sel_date.getMinutes() + ":" + sel_date.getSeconds();
      };
    } else {
      return null;
    }
  }
};

// component/Button.js
var Button = class extends Component {
  types = [
    { value: "default", css_class: "btn-default" },
    { value: "primary", css_class: "btn-primary" },
    { value: "secondary", css_class: "btn-secondary" },
    { value: "success", css_class: "btn-success" },
    { value: "danger", css_class: "btn-danger" },
    { value: "warning", css_class: "btn-warning" },
    { value: "info", css_class: "btn-info" },
    { value: "light", css_class: "btn-light" },
    { value: "dark", css_class: "btn-dark" }
  ];
  html = `
        <button class="btn $btn_class$ action-button designer-element"
                type="button" $style_str$
                data-shinyfunction="$r_func$"
                data-shinyattributes="$id_arg$ = &quot;$id$&quot;$icon_r$$class_str$$width_str$">
            $icon_html$
            $label$
        </button>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-button-label").val();
    let id = $("#sidebar-button-id").val();
    id = id === "" ? this.createID("input") : id;
    const input_type = $("#sidebar-button-type").val();
    const input_info = this.types.find((x) => x.value === input_type);
    if (!input_info)
      return;
    const btn_class = input_info.css_class;
    const class_str = input_type === "default" ? "" : `, class = &quot;${btn_class}&quot;`;
    const downloadable = document.getElementById("sidebar-button-download").checked;
    const r_func = downloadable ? "downloadButton" : "actionButton";
    let icon_html = downloadable ? '<i class="fa fa-download" role="presentation" aria-label="download icon"></i>' : "";
    const id_arg = downloadable ? "outputId" : "inputId";
    const tab_icon = $("#sidebar-button-icon").val();
    const icon_r = tab_icon === "" || downloadable ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" || downloadable ? "" : $("#sidebar-button-icon option").html().includes("fab") ? "fab" : "fa";
    icon_html = tab_icon === "" || downloadable ? icon_html : `<i aria-hidden="true" class="${icon_class} fa-${tab_icon} fa-fw" role="presentation"></i>`;
    const width = this.validateCssUnit($("#sidebar-button-width").val());
    const style_str = width ? `style="width: ${width};"` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      id_arg,
      label,
      r_func,
      icon_r,
      icon_html,
      btn_class,
      class_str,
      style_str,
      width_str
    });
  }
};

// component/Output.js
var Output = class extends Component {
  types = [
    { value: "text", label: "Text", css_class: "text-output-element shiny-text-output", r_func: "textOutput", placeholder: "Text Output: " },
    { value: "verbatim", label: "Verbatim Text", css_class: "verbatimtext-output-element shiny-text-output", r_func: "verbatimTextOutput", placeholder: "Verbatim Text Output: " },
    { value: "plot", label: "Plot", css_class: "plot-output-element shiny-plot-output", r_func: "plotOutput" },
    { value: "image", label: "Image", css_class: "image-output-element shiny-image-output", r_func: "imageOutput" },
    { value: "table", label: "Table", css_class: "table-output-element shiny-datatable-output", r_func: "DT::DTOutput" },
    { value: "html", label: "HTML", css_class: "html-output-element shiny-html-output", r_func: "uiOutput", placeholder: "Placeholder for HTML Output" }
  ];
  html = `
        <$html_tag$ $id_str$ class="designer-element output-element $css_class$"
            style="$style_str$"
            data-shinyfunction="$r_func$"
            data-shinyattributes="outputId = &quot;$id$&quot;$inline_str$$dim_str$">
            $output_tag$
        </$html_tag$>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-output-label").val();
    let id = $("#sidebar-output-id").val();
    id = id === "" ? this.createID("output") : id;
    const output_type = $("#sidebar-output-type").val();
    const output_info = this.types.find((x) => x.value === output_type);
    if (!output_info)
      return;
    const r_func = output_info.r_func;
    let html_tag = output_type === "verbatim" ? "pre" : "div";
    const css_class = output_info.css_class;
    let id_str = "";
    if (["plot", "image", "table"].includes(output_type)) {
      const designer_id = this.createID("output");
      Shiny.setInputValue("sidebar-outputid", designer_id);
      id_str = `id="sidebar-${designer_id}"`;
    }
    const inline = document.getElementById("sidebar-output-inline").checked;
    const inline_str = inline && !["verbatim", "table"].includes(output_type) ? ", inline = TRUE" : "";
    if (inline_str !== "") {
      html_tag = "span";
    }
    let dim_str = "";
    let style_str = "";
    if (["plot", "image"].includes(output_type)) {
      const width = this.validateCssUnit($("#sidebar-output-width").val(), "100%");
      style_str = `width: ${width};`;
      dim_str = width === "100%" ? "" : `, width = &quot;${width}&quot;`;
      const height = this.validateCssUnit($("#sidebar-output-height").val(), "400px");
      style_str = style_str + ` height: ${height};`;
      dim_str = dim_str + (height === "400px" ? "" : `, height = &quot;${height}&quot;`);
    }
    let output_tag = "";
    if (output_info.placeholder) {
      if (output_type === "html") {
        output_tag = `<span>${output_info.placeholder}</span>`;
      } else {
        output_tag = `<span>${output_info.placeholder} ${$("#sidebar-output-textarea").val()}</span>`;
      }
    }
    return this.replaceHTMLPlaceholders(this.html, {
      html_tag,
      id,
      label,
      id_str,
      r_func,
      css_class,
      style_str,
      dim_str,
      inline_str,
      output_tag
    });
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    if (typeof window === "undefined") {
      return null;
    }
    Shiny.bindAll();
  }
};

// component/Tab.js
var Tab = class extends Component {
  _item = 1;
  updateComponent() {
  }
  getPageType() {
    return $("#settings-page_type input:radio:checked").val();
  }
  addPage() {
    const page_type = this.getPageType();
    const tab_name = $("#sidebar-tab-name").val();
    let tab_value = $("#sidebar-tab-value").val();
    if (tab_value === "") {
      tab_value = this.createID("tab");
    } else if (this.checkDuplicateIDs(tab_value, page_type)) {
      return;
    }
    $("#sidebar-tab-alert div").alert("close");
    if (page_type === "dashboardPage") {
      this.addMenuItem(tab_name, tab_value);
    } else {
      this.addTab(tab_name, tab_value);
    }
  }
  addTab(tab_name, tab_value) {
    const nav_panel = $("ul.navbar-nav");
    const nav_id = nav_panel.data("tabsetid");
    const tab_panel = $(".tab-content");
    const active_class = tab_panel.html() === "" ? "active" : "";
    const tab_icon = $("#sidebar-tab-icon").val();
    const icon_r = tab_icon === "" ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" ? "" : $("#sidebar-tab-icon option").html().includes("fab") ? "fab" : "fa";
    const icon_html = tab_icon === "" ? "" : `<i aria-hidden="true" class="${icon_class} fa-${tab_icon} fa-fw" role="presentation"></i>`;
    nav_panel.append(`
            <li class="${active_class}">
                <a href="#tab-${nav_id}-${this._item}" data-toggle="tab"
                   data-bs-toggle="tab" data-value="${tab_value}" data-name="${tab_name}">
                   ${icon_html}
                   ${tab_name}
                </a>
            </li>
        `);
    tab_panel.append(`
            <div class="tab-pane ${active_class}" data-value="${tab_value}" id="tab-${nav_id}-${this._item}"
                 data-shinyfunction="tabPanel" data-shinyattributes="title = &quot;${tab_name}&quot;, value = &quot;${tab_value}&quot;${icon_r}"></div>
        `);
    this.enableSortablePage(`tab-${nav_id}-${this._item}`);
    this._item = this._item + 1;
  }
  addMenuItem(tab_name, tab_value) {
    const tab_panel = $("section.content .tab-content");
    const active_class = tab_panel.html() === "" ? "active" : "";
    const tab_icon = $("#sidebar-tab-icon").val();
    const icon_r = tab_icon === "" ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" ? "" : $("#sidebar-tab-icon option").html().includes("fab") ? "fab" : "fa";
    const icon_html = tab_icon === "" ? "" : `<i aria-hidden="true" class="${icon_class} fa-${tab_icon} nav-icon" role="presentation"></i>`;
    $(".sidebarMenuSelectedTabItem").before(`
            <li class="nav-item" data-shinyfunction="bs4Dash::menuItem"
                data-shinyattributes="text = &quot;${tab_name}&quot;, tabName = &quot;${tab_value}&quot;${icon_r}">
                <a class="nav-link ${active_class}" id="tab-${tab_value}" href="#"
                   data-toggle="tab" data-target="#shiny-tab-${tab_value}"
                   data-value="${tab_value}" data-name="${tab_name}">
                   ${icon_html}
                    <p>${tab_name}</p>
                </a>
            </li>
        `);
    if (!$(".sidebarMenuSelectedTabItem").attr("data-value")) {
      $(".sidebarMenuSelectedTabItem").attr("data-value", tab_value);
    }
    tab_panel.append(`
            <div role="tabpanel" data-value="${tab_value}" id="shiny-tab-${tab_value}"
                 class="tab-pane container-fluid ${active_class}"
                    data-shinyfunction="bs4Dash::tabItem" data-shinyattributes="tabName = &quot;${tab_value}&quot;"></div>
        `);
    this.enableSortablePage(`shiny-tab-${tab_value}`);
  }
  enableSortablePage(id) {
    Sortable.create(document.getElementById(id), {
      group: {
        name: "shared",
        put: function(_to, _from, clone) {
          return !clone.classList.contains("col-sm");
        }
      }
    });
  }
  checkDuplicateNames(tab_name, page_type) {
    if ($(this.getNameIdentifier(tab_name, page_type)).length > 0) {
      $("#sidebar-tab-alert").html(`
                <div class="alert alert-danger" role="alert">
                    ${tab_name} is the name of an existing menu item. Please choose a unique name
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    } else {
      return false;
    }
  }
  getNameIdentifier(tab_name, page_type) {
    if (page_type === "dashboardPage") {
      return `ul.sidebar-menu a[data-name='${tab_name}']`;
    } else {
      return `ul.navbar-nav a[data-name='${tab_name}']`;
    }
  }
  checkDuplicateIDs(tab_value, page_type) {
    if ($(this.getValueIdentifier(tab_value, page_type)).length > 0) {
      $("#sidebar-tab-alert").html(`
                <div class="alert alert-danger" role="alert">
                    ${tab_value} is the ID of an existing menu item. Please choose a unique ID
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    } else {
      return false;
    }
  }
  getValueIdentifier(tab_value, page_type) {
    if (page_type === "dashboardPage") {
      return `ul.sidebar-menu a[data-value='${tab_value}']`;
    } else {
      return `ul.navbar-nav a[data-value='${tab_value}']`;
    }
  }
  deletePage() {
    const page_type = this.getPageType();
    const tab_name = $("#sidebar-tab-name").val();
    let tab_value = $("#sidebar-tab-value").val();
    if (this.checkMissingName(tab_name, page_type)) {
      return true;
    } else if ($(this.getNameIdentifier(tab_name, page_type)).length > 1 && tab_value === "") {
      $("#sidebar-tab-alert").html(`
                <div class="alert alert-danger" role="alert">
                    Duplicate tabs contain the name "${tab_name}" and no value has been provided. Please provide the specific ID of the tab to delete.
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    }
    $("#sidebar-tab-alert div").alert("close");
    if (page_type === "dashboardPage") {
      tab_value = tab_value === "" ? $(`ul.nav a[data-name='${tab_name}']`).data("value") : tab_value;
      this.deleteMenuItem(tab_value);
    } else {
      tab_value = tab_value === "" ? $(`ul.nav a[data-name='${tab_name}']`).data("value") : tab_value;
      this.deleteTab(tab_value);
    }
  }
  deleteTab(tab_value) {
    $(`ul.nav a[data-value='${tab_value}']`).parent().remove();
    $(`.tab-content .tab-pane[data-value='${tab_value}']`).remove();
  }
  deleteMenuItem(tab_value) {
    $(`#tab-${tab_value}`).parent().remove();
    $(`#shiny-tab-${tab_value}`).remove();
  }
  checkMissingName(tab_name, page_type) {
    if ($(this.getNameIdentifier(tab_name, page_type)).length > 0) {
      return false;
    } else {
      $("#sidebar-tab-alert").html(`
                <div class="alert alert-danger" role="alert">
                    Unable to find a tab with the name "${tab_name}"
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    }
  }
};

// component/Tabset.js
var Tabset = class extends Component {
  _item = 1;
  id;
  html;
  is_tab = true;
  constructor() {
    super();
    this.id = this.getTabID();
    if (this.isDashPage()) {
      this.html = `
            <div class="designer-element $width_class$">
                <div class="card bs4Dash card-$colour$ card-outline card-outline-tabs tabset-designer-component">
                    <div class="card-header p-0 border-bottom-0">
                        <ul class="nav nav-tabs" data-tabsetid="$id$">$title$</ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" data-tabsetid="$id$" data-shinyfunction="bs4Dash::bs4TabCard" 
                             data-shinyattributes="$title_r$status = &quot;$colour$&quot;, width = $width_r$"></div>
                    </div>
                </div>
                <script type="application /json">{
                    "title":"$label$","solidHeader":true,"width":$width$,"collapsible":false,"closable":false,"maximizable":false,
                    "gradient":false,"status":"$colour$"
                }<\/script>                
            </div>`;
    } else {
      this.html = `
            <div class="tabbable designer-element tabset-designer-component">
                <ul class="nav nav-$type$" data-tabsetid="$id$"></ul>
                <div class="tab-content" data-tabsetid="$id$" data-shinyfunction="tabsetPanel" data-shinyattributes="type = &quot;$type$&quot;"></div>
            </div>`;
    }
    this.updateComponent(true);
  }
  createComponent() {
    if (this.isDashPage()) {
      const label = $("#sidebar-tabset-label").val();
      const title = label === "" ? "" : `<li class="pt-2 px-3"><h3 class="card-title">${label}</h3></li>`;
      const title_r = label === "" ? "" : `title = &quot;${label}&quot;, `;
      const width = $("#sidebar-tabset-width_num").val();
      const width_class = width > 0 ? `col-sm col-sm-${width}` : "";
      const width_r = width > 0 ? width : "NULL";
      const colour = $("#sidebar-tabset-colour").val();
      const colour_class = colour === "white" ? "" : `card-outline card-${colour}`;
      const background = $("#sidebar-tabset-background").val();
      const background_class = background === "white" ? "" : `bg-${background}`;
      return this.replaceHTMLPlaceholders(this.html, {
        id: this.id,
        title,
        title_r,
        label,
        width,
        width_class,
        width_r,
        colour,
        colour_class,
        background,
        background_class
      });
    } else {
      const type = $("#sidebar-tabset-type").val();
      return this.replaceHTMLPlaceholders(this.html, {
        id: this.id,
        type
      });
    }
  }
  isDashPage() {
    return this.getPageType() === "dashboardPage";
  }
  getPageType() {
    if (typeof window === "undefined") {
      return "navbarPage";
    } else {
      return $("#settings-page_type input:radio:checked").val();
    }
  }
  addPage() {
    const tab_name = $("#sidebar-tabset-name").val();
    let tab_value = $("#sidebar-tabset-value").val();
    if (tab_value === "") {
      tab_value = tab_name;
    }
    $("#sidebar-tabset-alert div").alert("close");
    if (this.isDashPage()) {
      this.addMenuItem(tab_name, tab_value);
    } else {
      this.addTab(tab_name, tab_value);
    }
  }
  addTab(tab_name, tab_value) {
    const nav_panel = $(".component-container>.tabbable>.nav");
    const nav_id = nav_panel.data("tabsetid");
    const tab_panel = $(".component-container>.tabbable>.tab-content");
    const active_class = tab_panel.children().length === 0 ? "active" : "";
    const tab_icon = $("#sidebar-tabset-icon").val();
    const icon_r = tab_icon === "" ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" ? "" : $("#sidebar-tabset-icon option").html().includes("fab") ? "fab" : "fa";
    const icon_html = tab_icon === "" ? "" : `<i aria-hidden="true" class="${icon_class} fa-${tab_icon} fa-fw" role="presentation"></i>`;
    nav_panel.append(`
            <li class="${active_class}">
                <a href="#tab-${nav_id}-${this._item}" data-toggle="tab"
                   data-bs-toggle="tab" data-value="${tab_value}" data-name="${tab_name}">
                   ${icon_html}
                   ${tab_name}
                </a>
            </li>
        `);
    tab_panel.append(`
            <div class="tab-pane ${active_class}" data-value="${tab_value}" id="tab-${nav_id}-${this._item}"
                 data-shinyfunction="tabPanel" data-shinyattributes="title = &quot;${tab_name}&quot;, value = &quot;${tab_value}&quot;${icon_r}"></div>
        `);
    this.enableSortablePage(`tab-${nav_id}-${this._item}`);
    this._item = this._item + 1;
  }
  addMenuItem(tab_name, tab_value) {
    const nav_panel = $(".component-container .card-header>.nav");
    const nav_id = nav_panel.data("tabsetid");
    const tab_panel = $(".component-container .card-body>.tab-content");
    const active_class = tab_panel.children().length === 0 ? "active" : "";
    const tab_icon = $("#sidebar-tabset-icon").val();
    const icon_r = tab_icon === "" ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" ? "" : $("#sidebar-tabset-icon option").html().includes("fab") ? "fab" : "fa";
    const icon_html = tab_icon === "" ? "" : `<i aria-hidden="true" class="${icon_class} fa-${tab_icon} fa-fw" role="presentation"></i>`;
    nav_panel.append(`
            <li class="nav-item">
                <a href="#tab-${nav_id}-${this._item}" class="nav-link ${active_class}" data-toggle="tab"
                   data-bs-toggle="tab" data-value="${tab_value}" data-name="${tab_name}">
                   ${icon_html}
                   ${tab_name}
                </a>
            </li>
        `);
    tab_panel.append(`
            <div class="tab-pane ${active_class}" data-value="${tab_value}" id="tab-${nav_id}-${this._item}"
                 data-shinyfunction="tabPanel" data-shinyattributes="title = &quot;${tab_name}&quot;, value = &quot;${tab_value}&quot;${icon_r}"></div>
        `);
    this.enableSortablePage(`tab-${nav_id}-${this._item}`);
    this._item = this._item + 1;
  }
  enableSortablePage(id) {
    Sortable.create(document.getElementById(id), {
      group: {
        name: "shared",
        put: function(_to, _from, clone) {
          return !clone.classList.contains("col-sm");
        }
      }
    });
  }
  checkDuplicateNames(tab_name) {
    if ($(this.getNameIdentifier(tab_name)).length > 0) {
      $("#sidebar-tabset-alert").html(`
                <div class="alert alert-danger" role="alert">
                    ${tab_name} is the name of an existing menu item. Please choose a unique name
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    } else {
      return false;
    }
  }
  getNameIdentifier(tab_name) {
    return `.component-container .nav a[data-name='${tab_name}']`;
  }
  checkDuplicateIDs(tab_value) {
    if ($(this.getValueIdentifier(tab_value)).length > 0) {
      $("#sidebar-tabset-alert").html(`
                <div class="alert alert-danger" role="alert">
                    ${tab_value} is the ID of an existing menu item. Please choose a unique ID
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    } else {
      return false;
    }
  }
  getValueIdentifier(tab_value) {
    return `.component-container .nav a[data-value='${tab_value}']`;
  }
  deletePage() {
    const tab_name = $("#sidebar-tabset-name").val();
    let tab_value = $("#sidebar-tabset-value").val();
    if (this.checkMissingName(tab_name)) {
      return true;
    } else if ($(this.getNameIdentifier(tab_name)).length > 1 && tab_value === "") {
      $("#sidebar-tabset-alert").html(`
                <div class="alert alert-danger" role="alert">
                    Duplicate tabs contain the name "${tab_name}" and no value has been provided. Please provide the specific ID of the tab to delete.
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    }
    $("#sidebar-tabset-alert div").alert("close");
    if (this.isDashPage()) {
      if (tab_value === "") {
        tab_value = $(`.component-container .nav-item a[data-name='${tab_name}']`).attr("href");
      } else {
        tab_value = "#" + $(`.component-container .tab-pane[data-value='${tab_value}']`).attr("id");
      }
      this.deleteMenuItem(tab_value);
    } else {
      tab_value = tab_value === "" ? $(`.component-container ul.nav a[data-name='${tab_name}']`).data("value") : tab_value;
      this.deleteTab(tab_value);
    }
  }
  deleteTab(tab_value) {
    $(`.component-container .nav a[data-value='${tab_value}']`).parent().remove();
    $(`.component-container .tab-content .tab-pane[data-value='${tab_value}']`).remove();
  }
  deleteMenuItem(tab_value) {
    $(`.component-container .nav-item a[href='${tab_value}']`).parent().remove();
    $(`${tab_value}`).remove();
  }
  checkMissingName(tab_name) {
    if ($(this.getNameIdentifier(tab_name)).length > 0) {
      return false;
    } else {
      $("#sidebar-tabset-alert").html(`
                <div class="alert alert-danger" role="alert">
                    Unable to find a tab with the name "${tab_name}"
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    }
  }
  getTabID() {
    return Math.round(Math.random() * 8999 + 1e3);
  }
};

// component/Box.js
var Box = class extends Component {
  has_card_body = true;
  html = `
        <div class="$width_class$ designer-element"
             data-shinyfunction="bs4Dash::bs4Card"
             data-shinyattributes="title = &quot;$label$&quot;, status = &quot;$colour$&quot;, background = &quot;$background$&quot;, width = $width_r$">
            <div class="card bs4Dash $colour_class$ $background_class$">
                <div class="card-header">
                    <h3 class="card-title">$label$</h3>
                    <div class="card-tools float-right">
                        <button class="btn btn-tool btn-sm $background_class$" type="button" data-card-widget="collapse">
                            <i class="fa fa-minus" role="presentation" aria-label="minus icon"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body designer-element"></div>
            </div>
            <script type="application /json">{
                "solidHeader":true,"width":$width$,"collapsible":true,"closable":false,"maximizable":false,
                "gradient":false,"background":"$background$","status":"$colour$"
            }<\/script>
        </div>
    `;
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return !clone.classList.contains("col-sm");
      }
    }
  };
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-box-label").val();
    const width = $("#sidebar-box-width_num").val();
    const width_class = width > 0 ? `col-sm col-sm-${width}` : "";
    const width_r = width > 0 ? width : "NULL";
    const colour = $("#sidebar-box-colour").val();
    const colour_class = colour === "white" ? "" : `card-outline card-${colour}`;
    const background = $("#sidebar-box-background").val();
    const background_class = background === "white" ? "" : `bg-${background}`;
    return this.replaceHTMLPlaceholders(this.html, {
      label,
      width_class,
      width_r,
      colour,
      colour_class,
      background,
      background_class
    });
  }
};

// component/UserBox.js
var UserBox = class extends Component {
  has_card_body = true;
  html = `
        <div class="$width_class$ designer-element"
             data-shinyfunction="bs4Dash::bs4UserCard"
             data-shinyattributes="title = bs4Dash::bs4userDescription(title = &quot;$label$&quot;, image = NULL, type = $type$), status = &quot;$colour$&quot;, background = &quot;$background$&quot;, type = $type$, width = $width_r$">
            <div class="card bs4Dash $background_class$ card-widget user-card widget-user">
                <div class="widget-user-header $colour_class$">
                    <div class="card-tools float-right">
                        <button class="btn btn-tool btn-sm btn-$colour$" type="button" data-card-widget="collapse">
                            <i class="fa fa-minus" role="presentation" aria-label="minus icon"></i>
                        </button>
                    </div>
                    <h3 class="widget-user-username">$label$</h3>
                </div>
                <div class="widget-user-image">
                    <img class="img-circle" alt="User Avatar" src="www/avatar.png"/>
                </div>                
                <div class="card-body designer-element" type="$type$"></div>
                <div class="card-footer"></div>
            </div>
        </div>
    `;
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return !clone.classList.contains("col-sm");
      }
    }
  };
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const label = $("#sidebar-user_box-label").val();
    const width = $("#sidebar-user_box-width_num").val();
    const width_class = width > 0 ? `col-sm col-sm-${width}` : "";
    const width_r = width > 0 ? width : "NULL";
    const colour = $("#sidebar-user_box-colour").val();
    const colour_class = colour === "white" ? "" : `card-outline card-${colour}`;
    const background = $("#sidebar-user_box-background").val();
    const background_class = background === "white" ? "" : `bg-${background}`;
    const type = $("#sidebar-user_box-type").val();
    return this.replaceHTMLPlaceholders(this.html, {
      label,
      width_class,
      width_r,
      colour,
      colour_class,
      background,
      background_class,
      type
    });
  }
};

// component/ValueBox.js
var ValueBox = class extends Component {
  html = `
        <div class="$width_class$ designer-element"
             data-shinyfunction="bs4Dash::bs4ValueBox"
             data-shinyattributes="value = &quot;$value$&quot;, subtitle = &quot;$label$&quot;$icon_r$, color = &quot;$colour$&quot;, width = $width_r$">
            <div class="small-box $colour_class$">
                <div class="inner">
                    $value$
                    <p class="small-box-subtitle">
                        $label$
                    </p>
                </div>
                $icon_html$
                <div class="small-box-footer" style="height: 30px;"></div>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const value = $("#sidebar-value_box-value").val();
    const label = $("#sidebar-value_box-label").val();
    const width = $("#sidebar-value_box-width_num").val();
    const width_class = width > 0 ? `col-sm col-sm-${width}` : "";
    const width_r = width > 0 ? width : "NULL";
    const tab_icon = $("#sidebar-value_box-icon").val();
    const icon_r = tab_icon === "" ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" ? "" : $("#sidebar-value_box-icon option").html().includes("fab") ? "fab" : "fa";
    const icon_html = tab_icon === "" ? "" : `<div class="icon"><i aria-hidden="true" class="${icon_class} fa-${tab_icon} fa-fw" role="presentation"></i></div>`;
    const background = $("#sidebar-value_box-background").val();
    const background_class = `bg-${background}`;
    return this.replaceHTMLPlaceholders(this.html, {
      value,
      label,
      width_class,
      width_r,
      icon_html,
      icon_r,
      colour: background,
      colour_class: background_class
    });
  }
};

// component/InfoBox.js
var InfoBox = class extends Component {
  html = `
        <div class="$width_class$ designer-element"
             data-shinyfunction="bs4Dash::bs4InfoBox"
             data-shinyattributes="value = &quot;$value$&quot;, subtitle = &quot;$label$&quot;$icon_r$, color = &quot;$colour$&quot;$fill_r$, width = $width_r$">
            <div class="info-box $colour_class$">
                <span class="info-box-icon $colour_class2$">
                    $icon_html$
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">$label$</span>
                    <span class="info-box-number">$value$</span>
                </div>
                <div class="small-box-footer" style="height: 30px;"></div>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const value = $("#sidebar-info_box-value").val();
    const label = $("#sidebar-info_box-label").val();
    const width = $("#sidebar-info_box-width_num").val();
    const width_class = width > 0 ? `col-sm col-sm-${width}` : "";
    const width_r = width > 0 ? width : "NULL";
    const tab_icon = $("#sidebar-info_box-icon").val();
    const icon_r = tab_icon === "" ? "" : `, icon = icon(&quot;${tab_icon}&quot;)`;
    const icon_class = tab_icon === "" ? "" : $("#sidebar-info_box-icon option").html().includes("fab") ? "fab" : "fa";
    const icon_html = tab_icon === "" ? "" : `<i aria-hidden="true" class="${icon_class} fa-${tab_icon} fa-fw" role="presentation"></i>`;
    const background = $("#sidebar-info_box-background").val();
    const background_class = `bg-${background}`;
    const fill_box = document.getElementById("sidebar-info_box-fill").checked;
    const fill_r = fill_box ? ", fill = TRUE" : "";
    return this.replaceHTMLPlaceholders(this.html, {
      value,
      label,
      width_class,
      width_r,
      icon_html,
      icon_r,
      colour: background,
      colour_class: fill_box ? background_class : "",
      colour_class2: fill_box ? "" : background_class,
      fill_r
    });
  }
};

// component/BlockQuote.js
var BlockQuote = class extends Component {
  html = '<blockquote class="designer-element quote-$colour$" data-shinyfunction="bs4Dash::blockQuote" data-shinyattributes="color = &quot;$colour$&quot;">$value$</blockquote>';
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const colour = $("#sidebar-quote-colour").val();
    const value = $("#sidebar-quote-textarea").val();
    return this.replaceHTMLPlaceholders(this.html, { colour, value });
  }
};

// component/Callout.js
var Callout = class extends Component {
  html = `
        <div class="designer-element $width_class$">
        <div class="callout callout-$status$" data-shinyfunction="bs4Dash::bs4Callout" 
             data-shinyattributes="title = &quot;$title$&quot;, status = &quot;$colour$&quot;, width = $width_r$">
           <h5>$title$</h5>
           $value$
        </div>
    `;
  constructor() {
    super();
    this.updateComponent(true);
  }
  createComponent() {
    const title = $("#sidebar-callout-label").val();
    const status = $("#sidebar-callout-colour").val();
    const value = $("#sidebar-callout-textarea").val();
    const width = $("#sidebar-callout-width_num").val();
    const width_class = width > 0 ? `col-sm col-sm-${width}` : "";
    const width_r = width > 0 ? width : "NULL";
    return this.replaceHTMLPlaceholders(this.html, {
      title,
      status,
      value,
      width_r,
      width_class
    });
  }
};

// component/utils.js
function getComponent(name) {
  if (name === "header") {
    return new Header();
  } else if (name === "row") {
    return new Row();
  } else if (name === "column") {
    return new Column();
  } else if (name === "text") {
    return new Text();
  } else if (name === "input_panel") {
    return new InputPanel();
  } else if (["text_input", "numeric", "textarea", "password"].includes(name)) {
    return new Input(name);
  } else if (name === "dropdown") {
    return new SelectInput();
  } else if (name === "file") {
    return new FileInput();
  } else if (name === "date") {
    return new DateInput();
  } else if (name === "checkbox") {
    return new CheckboxInput();
  } else if (name === "radio") {
    return new CheckboxGroupInput();
  } else if (name === "slider") {
    return new SliderInput();
  } else if (name === "button") {
    return new Button();
  } else if (name === "output") {
    return new Output();
  } else if (name === "tab_panel") {
    return new Tab();
  } else if (name === "tabset") {
    return new Tabset();
  } else if (name === "box") {
    return new Box();
  } else if (name === "user_box") {
    return new UserBox();
  } else if (name === "value_box") {
    return new ValueBox();
  } else if (name === "info_box") {
    return new InfoBox();
  } else if (name === "quote") {
    return new BlockQuote();
  } else if (name === "callout") {
    return new Callout();
  }
  return new Header();
}

// component/init.js
function initComponents() {
  getComponent("header");
  $(".component-settings").on("change keyup", () => component.updateComponent());
  $(".component-comments").on("change blur", () => component.updateComponent());
  $(".component-container").on("mouseover", () => {
    $(":focus").trigger("blur");
  });
  $(".add-tab-button").on("click", () => component.addPage());
  $(".delete-tab-button").on("click", () => component.deletePage());
  $(".accordion .card-header .btn").on("click", (el) => {
    $(el.target).closest(".card").find("form").trigger("reset");
    const new_component = $(el.target).data("shinyelement");
    getComponent(new_component);
    document.getElementById("sidebar-container").style.display = new_component === "tab_panel" ? "none" : null;
  });
}

// input/utils.js
function htmlToJSON(el, inner = false) {
  const children = getChildrenJSON(el);
  const jsonElement = {
    tagName: el.tagName.toLowerCase(),
    r_function: el.dataset.shinyfunction,
    r_arguments: el.dataset.shinyattributes,
    r_comments: el.dataset.shinycomments,
    text: $(el).ignore().text().replace(/\s*\n\s*/g, ""),
    htmlclass: el.className,
    children
  };
  if (inner) {
    return jsonElement;
  } else {
    return JSON.stringify(jsonElement);
  }
}
$.fn.ignore = function(sel) {
  return this.clone().find(sel || ">*").remove().end();
};
function getChildrenJSON(el) {
  let children = [];
  for (let i = 0; i < el.children.length; i++) {
    if (el.children[i].dataset.shinyfunction) {
      children.push(htmlToJSON(el.children[i], true));
    } else if (el.children[i].children.length) {
      const childContent = getChildrenJSON(el.children[i]);
      if (childContent.length > 0) {
        children = children.concat(childContent);
      }
    }
  }
  return children;
}

// input/canvas-page-input.js
var canvasPageBinding = new Shiny.InputBinding();
$.extend(canvasPageBinding, {
  find: function(scope) {
    return $(scope).find(".page-canvas");
  },
  getValue: function(el) {
    return htmlToJSON(document.getElementById("canvas-page"));
  },
  subscribe: function(el, callback) {
    const observer = new MutationObserver(function() {
      callback();
    });
    observer.observe(el, { subtree: true, childList: true, attributes: true });
  },
  unsubscribe: function(el) {
    $(el).off(".page-canvas");
  }
});

// input/canvas-canvas-input.js
var canvasBinding = new Shiny.InputBinding();
$.extend(canvasBinding, {
  find: function(scope) {
    return $(scope).find(".page-canvas-shell");
  },
  getValue: function(el) {
    return $(el).find(".page-canvas").html();
  },
  setValue: function(el, value) {
    $(el).find(".page-canvas").html(value);
  },
  subscribe: function(el, callback) {
    const observer = new MutationObserver(function() {
      callback();
    });
    observer.observe(el, { subtree: true, childList: true, attributes: true });
  },
  unsubscribe: function(el) {
    $(el).off(".page-canvas-shell");
  },
  receiveMessage(el, data) {
    this.setValue(el, data);
    $(".canvas-modal").css("display", "none");
    page.enableSortablePage("canvas-page");
    page.updateComponentDropdown();
    new Component().enableSortable();
    const sortableSettings = new Column(update_component = false).sortable_settings;
    const sortableRowSettings = new Row(update_component = false).sortable_settings;
    const sortableInputPanelSettings = new InputPanel(update_component = false).sortableSettings;
    PARENT_DESIGNER_CLASSES.map((x) => enableSortableComponent(x, sortableSettings));
    enableSortableComponent("designer-element row", sortableRowSettings);
    enableSortableComponent("designer-element shiny-input-panel", sortableInputPanelSettings);
  }
});
var PARENT_DESIGNER_CLASSES = ["tab-pane", "designer-element col-sm", "designer-element card-body"];
function enableSortableComponent(selector, settings) {
  document.getElementsByClassName(selector).forEach((el) => {
    Sortable.create(el, settings);
  });
}

// app/index.js
$(function() {
  initPage();
  initComponents();
  initSettings();
  $(".help-icon").tooltip({ boundary: "window", placement: "right" });
  bsCustomFileInput.init();
  Sortable.create(document.getElementById("sidebar-bin"), {
    group: {
      name: "shared",
      pull: false
    },
    handle: ".designer-element",
    draggable: ".designer-element",
    onAdd: function(evt) {
      this.el.removeChild(evt.item);
    }
  });
});
Shiny.inputBindings.register(canvasPageBinding);
Shiny.inputBindings.register(canvasBinding);
//# sourceMappingURL=designer.min.js.map
