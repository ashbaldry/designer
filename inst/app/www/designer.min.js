// page/Page.js
var Page = class {
  navbar_item_style = "none";
  bs4_item_style = "none";
  enable_on_load = true;
  page_html;
  constructor() {
  }
  updateComponentDropdown() {
    $(".navbar-tab-item").css("display", this.navbar_item_style);
    $(".bs4-item").css("display", this.bs4_item_style);
    if (this.navbar_item_style === "none") {
      $("#settings-component a[name='header']").trigger("click");
    } else {
      $("#settings-component a[name='tab_panel']").trigger("click");
    }
  }
  getPageHTML(html, title = "") {
    return html.replaceAll("$page_id$", this.getTabID()).replaceAll("$title$", title);
  }
  updatePage() {
    const title = $("#canvas-title").html();
    $(".page-canvas").html(this.getPageHTML(this.page_html, title));
  }
  enableSortablePage(id) {
    Sortable.create(document.getElementById(id), {
      group: {
        name: "shared",
        put: function(_to, _from, clone) {
          return !clone.classList.contains("col-sm");
        }
      }
    });
  }
  getTabID() {
    return Math.round(Math.random() * 8999 + 1e3);
  }
};

// page/BasicPage.js
var BasicPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" data-shinyfunction="basicPage"></div>
    `;
};

// page/FillPage.js
var FillPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template" 
             data-shinyfunction="fillPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/FluidPage.js
var FluidPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" 
             data-shinyfunction="fluidPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/BootstrapPage.js
var BootstrapPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" 
             data-shinyfunction="bootstrapPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/NavbarPage.js
var NavbarPage = class extends Page {
  navbar_item_style = "";
  enable_on_load = false;
  page_html = `
        <div class="designer-page-template">
            <nav class="navbar navbar-default navbar-static-top" role="navigation">
                <div class="container-fluid">
                    <div class="navbar-header">
                        <span class="navbar-brand">$title$</span>
                    </div>
                    <ul class="nav navbar-nav" data-tabsetid="$page_id$"></ul>
                </div>
            </nav>
            <div class="container-fluid navbar-page-tabs">
                <div id="canvas-page" class="tab-content"
                     data-tabsetid="$page_id$" data-shinyfunction="navbarPage"
                     data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
            </div>
        </div>
    `;
};

// page/DashboardPage.js
var DashboardPage = class extends Page {
  navbar_item_style = "";
  bs4_item_style = "";
  enable_on_load = false;
  page_html = `
        <div id="canvas-page" class="wrapper designer-page-template"
             data-shinyfunction="bs4Dash::dashboardPage" data-shinyattributes="title = &quot;$title$&quot;">
            <nav data-fixed="false" class="main-header navbar navbar-expand navbar-white navbar-light"
                 data-shinyfunction="bs4Dash::dashboardHeader" data-shinyattributes="title = &quot;$title$&quot;">
                <ul class="navbar-nav">
                    <a class="nav-link" data-widget="pushmenu" href="#">
                        <i class="fa fa-bars" role="presentation" aria-label="bars icon"></i>
                    </a>
                </ul>
                <ul class="navbar-nav ml-auto navbar-right"></ul>
            </nav>
            <aside id="sidebarId" data-fixed="true" data-minified="true" data-collapsed="false"
                   data-disable="FALSE" class="main-sidebar sidebar-dark-primary elevation-4"
                   data-shinyfunction="bs4Dash::dashboardSidebar">
                <div class="brand-link">$title$</div>
                <div class="sidebar" id="sidebarItemExpanded">
                    <nav class="mt-2">
                        <ul class="nav nav-pills nav-sidebar flex-column sidebar-menu nav-child-indent"
                            data-widget="treeview" role="menu" data-accordion="true" data-shinyfunction="bs4Dash::sidebarMenu">
                            <div id="tabs_$page_id$" class="sidebarMenuSelectedTabItem"></div>
                        </ul>
                    </nav>
                </div>
            </aside>
            <div class="content-wrapper" data-shinyfunction="bs4Dash::dashboardBody">
                <section class="content">
                    <div class="tab-content"></div>
                </section>
            </div>
        </div>
    `;
};

// page/utils.js
function createPage() {
  var page_type = $("#settings-page_type input:radio:checked").val();
  var page;
  if (page_type === "basicPage") {
    page = new BasicPage();
  } else if (page_type === "fillPage") {
    page = new FillPage();
  } else if (page_type === "fluidPage") {
    page = new FluidPage();
  } else if (page_type === "bootstrapPage") {
    page = new BootstrapPage();
  } else if (page_type === "navbarPage") {
    page = new NavbarPage();
  } else if (page_type === "dashboardPage") {
    page = new DashboardPage();
  } else {
    page = new BasicPage();
  }
  page.updatePage();
  if (page.enable_on_load) {
    page.enableSortablePage("canvas-page");
  }
  page.updateComponentDropdown();
  return page;
}
function changePageCheck() {
  if ($("#canvas-page").html() === "") {
    $("#canvas-page").html("<div></div>");
    createPage();
  } else {
    $("#warning_modal").modal();
  }
}
function updateTitle(el) {
  const title = $(el.target).val();
  $("#canvas-title").html(title);
  $(".navbar-brand").html(title);
  $(".brand-link").html(title);
  if ($("#canvas-page").data("shinyattributes")) {
    var shiny_atts = $("#canvas-page").data("shinyattributes").replace(/"[^"]+"/, `"${title}"`);
    $("#canvas-page").attr("data-shinyattributes", shiny_atts);
  }
  if ($("#canvas-page>.main-header").data("shinyattributes")) {
    var shiny_atts2 = $("#canvas-page>.main-header").data("shinyattributes").replace(/"[^"]+"/, `"${title}"`);
    $("#canvas-page>.main-header").attr("data-shinyattributes", shiny_atts2);
  }
}

// page/init.js
function initPage() {
  createPage();
  $("#settings-page_type").on("change", changePageCheck);
  $("#confirm_reset").on("click", createPage);
  $("#app_name").on("change keyup", updateTitle);
}

// app/settings.js
function initSettings() {
  $(".copy-ui-button").on("click", copyUICode);
  $("#remove_label").on("change", toggleComponentLabels);
  $("#remove_colour").on("change", toggleBackgroundColours);
  $("#remove_border").on("change", toggleBorders);
  $(document).on("click", ".clickable-dropdown", (e) => {
    e.stopPropagation();
  });
  $("#preview").on("click", () => {
    $(".page-canvas-shell").addClass("preview");
  });
  $("#canvas-close_preview").on("click", () => {
    $(".page-canvas-shell").removeClass("preview");
  });
}
function toggleComponentLabels() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-after-label");
  } else {
    $(".designer-page-template").addClass("hidden-after-label");
  }
}
function toggleBackgroundColours() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-colour");
  } else {
    $(".designer-page-template").addClass("hidden-colour");
  }
}
function toggleBorders() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-borders");
  } else {
    $(".designer-page-template").addClass("hidden-borders");
  }
}
function copyUICode() {
  var copy_text = document.getElementById("settings-code-code").textContent;
  navigator.clipboard.writeText(copy_text);
  return;
}

// component/Component.js
var Component = class {
  updatable = true;
  display_comments = true;
  display_container = true;
  name;
  parameters;
  tags;
  types;
  notes;
  sortable_settings;
  html;
  constructor() {
    $("#component_settings").css("display", "");
    $("#tab_settings").css("display", "none");
    this.updateLabels([
      { id: "type", text: "Type" },
      { id: "id", text: "Input ID" }
    ]);
  }
  showRelevantOptions() {
    $(".component-settings").css("display", "");
    for (let i = 0; i < this.parameters.length; i++) {
      $(".component-settings[data-component= '" + this.parameters[i] + "']").css("display", "unset");
    }
    this.updateTitle();
    this.updateNotes();
    $(".component-container").css("display", this.display_container ? "" : "none");
    $(".component-comments").css("display", this.display_comments ? "" : "none");
  }
  updateTitle() {
    const title = this.name ? `${this.name} Settings` : null;
    $("#sidebar-title").html(title);
  }
  updateNotes() {
    $("#sidebar-notes").html(null);
    if (this.notes) {
      $("#sidebar-notes").html("<h3>Notes</h3><ul></ul>");
      for (let i = 0; i < this.notes.length; i++) {
        $("#sidebar-notes ul").append("<li>" + this.notes[i] + "</li>");
      }
    }
  }
  createComponent() {
    return this.html;
  }
  replaceHTMLPlaceholders(html, options) {
    for (const property in options) {
      html = html.replaceAll("$" + property + "$", options[property]);
    }
    return html;
  }
  updateComponent(update_sortable = false) {
    $(".component-container").html(null);
    const html = this.createComponent();
    $(".component-container").html(html);
    this.addComments();
    if (update_sortable) {
      this.enableSortable();
    }
  }
  enableSortable() {
    Sortable.create(document.getElementById("sidebar-container"), {
      group: {
        name: "shared",
        pull: "clone",
        put: false
      },
      onClone: function(evt) {
        if (component.sortable_settings) {
          Sortable.create(evt.item, component.sortable_settings);
        }
      },
      onEnd: function(_evt) {
        $('.page-canvas [data-toggle="tooltip"]').tooltip();
        if (component.updatable || $("#sidebar-comments").val() !== "") {
          $("#sidebar-comments").val("");
          component.updateComponent();
        }
      }
    });
  }
  addComments() {
    const comments = $("#sidebar-comments").val();
    if (comments) {
      $(".component-container>.designer-element").attr("data-shinycomments", comments);
      $(".component-container>.designer-element").attr("title", comments);
      $(".component-container>.designer-element").attr("data-toggle", "tooltip");
    }
  }
  updateTag() {
    if (this.tags) {
      var selectize = $("#sidebar-tag").selectize()[0].selectize;
      selectize.clearOptions(true);
      selectize.addOption(this.tags);
      selectize.refreshOptions(false);
      selectize.addItem(this.tags[0].value);
    }
  }
  updateType() {
    if (this.types) {
      var selectize = $("#sidebar-type").selectize()[0].selectize;
      selectize.clearOptions(true);
      selectize.addOption(this.types);
      selectize.refreshOptions(false);
      selectize.addItem(this.types[0].value);
    }
  }
  updateTextInputs(elements) {
    for (var i = 0; i < elements.length; i++) {
      this.updateTextInput(elements[i].id, elements[i].text);
    }
  }
  updateTextInput(id, text = "") {
    $(`#sidebar-${id}`).val(text);
  }
  updateLabels(elements) {
    for (var i = 0; i < elements.length; i++) {
      this.updateLabel(elements[i].id, elements[i].text);
    }
  }
  updateLabel(id, text = "") {
    $(`label[for='sidebar-${id}']`).html(text);
  }
  createID(prefix = "") {
    prefix = prefix ? prefix + "_" : prefix;
    return prefix + Math.random().toString(36).substring(2, 12);
  }
  validateCssUnit(x, fallback) {
    if (this._regex.test(x)) {
      return x;
    } else if (/^\d+$/.test(x)) {
      return x + "px";
    } else {
      return fallback;
    }
  }
  _regex = /^(auto|inherit|fit-content|calc\(.*\)|((\.\d+)|(\d+(\.\d+)?))(%|in|cm|mm|ch|em|ex|rem|pt|pc|px|vh|vw|vmin|vmax))$/;
};

// component/Header.js
var Header = class extends Component {
  name = "Header";
  parameters = ["tag", "text"];
  tags = [
    { value: "h1", label: "h1", text: "h1" },
    { value: "h2", label: "h2", text: "h2" },
    { value: "h3", label: "h3", text: "h3" },
    { value: "h4", label: "h4", text: "h4" },
    { value: "h5", label: "h5", text: "h5" },
    { value: "h6", label: "h6", text: "h6" }
  ];
  html = `<$tag$ class="designer-element" data-shinyfunction="$tag$">$value$</$tag$>`;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTag();
    this.updateTextInput("text", "Header");
  }
  createComponent() {
    const tag = $("#sidebar-tag").val();
    const value = $("#sidebar-text").val();
    return this.replaceHTMLPlaceholders(this.html, { tag, value });
  }
};

// component/Row.js
var Row = class extends Component {
  name = "Row";
  parameters = [];
  updatable = false;
  html = `<div class="designer-element row row-designer" data-shinyfunction="fluidRow"></div>`;
  notes = [
    "The only component that can be a direct child of a row are columns.",
    "By default, a row will have no height and is determined by the contents inside. To easily drop elements into the rows, they have a minimum height of 50px in this app."
  ];
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return clone.classList.contains("col-sm");
      }
    }
  };
  constructor() {
    super();
    this.showRelevantOptions();
  }
};

// component/Column.js
var Column = class extends Component {
  name = "Column";
  parameters = ["width_num", "offset"];
  updatable = false;
  html = `
        <div class="designer-element col-sm col-sm-$width$$offset_class$"
             data-shinyfunction="column"
             data-shinyattributes="width = $width$$offset_r$"></div>
    `;
  notes = [
    "Columns can only be included in <b>rows</b>.",
    "Rows are split into 12 column units, if the sum of columns' width exceeds 12, they get wrapped onto a new line."
  ];
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return !clone.classList.contains("col-sm");
      }
    }
  };
  constructor() {
    super();
    this.showRelevantOptions();
  }
  createComponent() {
    const width = $("#sidebar-width_num").val();
    const offset = $("#sidebar-offset").val();
    var offset_class = offset > 0 ? ` offset-md-${offset}` : "";
    var offset_r = offset > 0 ? `, offset = ${offset}` : "";
    return this.replaceHTMLPlaceholders(this.html, { width, offset_class, offset_r });
  }
};

// component/Text.js
var Text = class extends Component {
  name = "Text";
  parameters = ["tag", "textarea"];
  tags = [
    { value: "p", label: "Paragraph <p>", text: "Paragraph <p>" },
    { value: "ol", label: "Ordered List <ol>", text: "Ordered List <ol>" },
    { value: "ul", label: "Unordered List <ul>", text: "Unordered List <ul>" }
  ];
  html = `<$tag$ class="designer-element" data-shinyfunction="tags$$tag$">$value$</$tag$>`;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTag();
    this.updateTextInput("textarea", "");
  }
  createComponent() {
    const tag = $("#sidebar-tag").val();
    const value = $("#sidebar-textarea").val();
    const contents = tag === "p" ? value.replace(/\n/g, " ") : this.createListItems(value);
    return this.replaceHTMLPlaceholders(this.html, { tag, value: contents });
  }
  createListItems(text) {
    return text.split("\n").map((x) => '<li data-shinyfunction="tags$li">' + x + "</li>").join("");
  }
};

// component/InputPanel.js
var InputPanel = class extends Component {
  name = "Input Panel";
  parameters = [];
  updatable = false;
  html = `<div class="designer-element shiny-input-panel shiny-flow-layout" data-shinyfunction="inputPanel"></div>`;
  notes = [
    "By default inputs will be aligned vertically, input panels enable the inputs to be aligned horizontally."
  ];
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return clone.classList.contains("form-group") || clone.classList.contains("btn");
      }
    }
  };
  constructor() {
    super();
    this.showRelevantOptions();
  }
};

// component/Input.js
var Input = class extends Component {
  name = "Input";
  parameters = ["type", "id", "label", "width"];
  types = [
    { value: "text", label: "Text", r_func: "textInput" },
    { value: "textarea", label: "Text Area", r_func: "textAreaInput" },
    { value: "number", label: "Numeric", r_func: "numericInput" },
    { value: "password", label: "Password", r_func: "passwordInput" }
  ];
  notes = [
    "To position several inputs horizontally, they must be put within an input panel."
  ];
  html = `
        <div class="designer-element form-group shiny-input-container" 
             $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;label&quot;$style_str$"
             data-shinyfunction="$r_func$"><label class="control-label">$label$</label>$input_tag$</div>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateType();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("input") : id;
    const input_type = $("#sidebar-type").val();
    const input_info = this.types.find((x) => x.value === input_type);
    if (!input_info)
      return;
    const r_func = input_info.r_func;
    let input_tag;
    if (input_type === "textarea") {
      input_tag = `<textarea class="form-control" placeholder="textarea input"></textarea>`;
    } else {
      input_tag = `<input class="form-control" type="${input_type}" placeholder="${input_info.label} input">`;
    }
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      r_func,
      input_tag,
      style_str,
      width_str
    });
  }
};

// component/FileInput.js
var FileInput = class extends Component {
  name = "File Input";
  parameters = ["id", "label", "width"];
  notes = [
    "To position several inputs horizontally, they must be put within an input panel."
  ];
  html = `
        <div class="designer-element form-group shiny-input-container"
             data-shinyfunction="fileInput" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$width_str$">
            <label class="control-label">$label$</label>
            <div class="input-group">
                <label class="input-group-btn input-group-prepend">
                    <span class="btn btn-default btn-file">
                        Browse...
                        <input type="file" style="position: absolute !important; top: -99999px !important; left: -99999px !important;"/>
                    </span>
                </label>
                <input type="text" class="form-control" placeholder="No file selected" readonly="readonly"/>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("input") : id;
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      style_str,
      width_str
    });
  }
};

// component/SelectInput.js
var SelectInput = class extends Component {
  name = "Dropdown";
  parameters = ["id", "label", "width"];
  notes = [
    "To position several inputs horizontally, they must be put within an input panel."
  ];
  html = `
        <div class="designer-element form-group shiny-input-container" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;, choices = NULL$width_str$"
             data-shinyfunction="selectInput">
             <label class="control-label">$label$</label>
             <div>
                <select>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("input") : id;
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      style_str,
      width_str
    });
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    $(".component-container").find("select").selectize({
      labelField: "label",
      valueField: "value",
      searchField: ["label"],
      placeholder: "select input"
    });
  }
};

// component/DateInput.js
var DateInput = class extends Component {
  name = "Date";
  parameters = ["id", "label", "range", "width"];
  notes = [
    "To position several inputs horizontally, they must be put within an input panel."
  ];
  html = `
        <div class="designer-element form-group shiny-input-container $date_class$" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$width_str$"
             data-shinyfunction="$r_func$">
             <label class="control-label">$label$</label>
             $input_tag$
        </div>
    `;
  date_input_html = `
        <input class="form-control" type="text" title="Date format: yyyy-mm-dd" placeholder="date input"
               data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd"
               data-date-start-view="month" data-date-autoclose="true"/>
    `;
  date_range_input_html = `
        <div class="input-daterange input-group input-group-sm">
            <input class="form-control" type="text" title="Date format: yyyy-mm-dd" placeholder="date input"
                   data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd"
                   data-date-start-view="month" data-date-autoclose="true"/>
            <span class="input-group-addon input-group-prepend input-group-append">
                <span class ="input-group-text"> to </span>
            </span>               
            <input class="form-control" type="text" title="Date format: yyyy-mm-dd" placeholder="date input"
                   data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd"
                   data-date-start-view="month" data-date-autoclose="true"/>        
        </div>       
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("input") : id;
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    const range = document.getElementById("sidebar-range").checked;
    const r_func = range ? "dateRangeInput" : "dateInput";
    const date_class = range ? "shiny-date-range-input" : "shiny-date-input";
    const input_tag = range ? this.date_range_input_html : this.date_input_html;
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      r_func,
      date_class,
      input_tag,
      style_str,
      width_str
    });
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    $(".component-container").find("input").bsDatepicker();
  }
};

// component/Checkbox.js
var CheckboxInput = class extends Component {
  name = "Checkbox";
  parameters = ["id", "label", "width"];
  html = `
        <div class="designer-element form-group shiny-input-container" $style_str$
                 data-shinyfunction="checkboxInput"
                 data-shinyattributes="inputId = &quot;$id&quot;, label = &quot;$label&quot;$width_str$">
            <div class="checkbox">
                <label>
                    <input type="checkbox"><span>$label$</span>
                </label>
            </div>
        </div>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("checkbox") : id;
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      style_str,
      width_str
    });
  }
};

// component/CheckboxGroup.js
var CheckboxGroupInput = class extends Component {
  name = "Checkbox Group";
  parameters = ["type", "id", "label", "choices", "inline", "width"];
  types = [
    { value: "radio", label: "Radio", r_func: "radioButtons", role: "radiogroup" },
    { value: "checkbox", label: "Checkbox", r_func: "checkboxGroupInput", role: "group" }
  ];
  html = `
        <div class="designer-element form-group shiny-input-container $css_class$" $style_str$
             data-shinyfunction="$r_func$" 
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$choices_str$$width_str$"
             role="$role">
            <label class="control-label">$label$</label>
            <div class="shiny-options-group">
                $choices$
            </div>
        </div>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateType();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("choices", "Choice 1\nChoice 2");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("checkbox") : id;
    var type = $("#sidebar-type").val();
    const input_info = this.types.find((x) => x.value === type);
    if (!input_info)
      return;
    const r_func = input_info.r_func;
    const role = input_info.role;
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    var inline = document.getElementById("sidebar-inline").checked;
    const inline_class = inline ? "-inline" : "";
    const css_class = `shiny-input-${type}group${inline_class}`;
    const choices = $("#sidebar-choices").val();
    const choices_str = `, choices = c(&quot;${choices.replace(/\n/g, "&quot;, &quot;")}&quot;)`;
    const choices_html = choices.split("\n").map((x) => this.createCheckbox(x, id = id, type = type, inline = inline)).join("");
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      label,
      css_class,
      r_func,
      role,
      choices: choices_html,
      choices_str,
      style_str,
      width_str
    });
  }
  createCheckbox(x, id = "", type = "checkbox", inline = false) {
    var check_class = inline ? type + "-inline" : type;
    return `<label class="${check_class}"><input type="${type}"><span>${x}</span></label>`;
  }
};

// component/SliderInput.js
var SliderInput = class extends Component {
  name = "Slider Input";
  parameters = ["type", "id", "label", "range", "width"];
  types = [
    { value: "number", label: "Numeric" },
    { value: "date", label: "Date" },
    { value: "datetime", label: "Timestamp" }
  ];
  notes = [
    "To position several inputs horizontally, they must be put within an input panel."
  ];
  html = `
        <div class="designer-element form-group shiny-input-container" $style_str$
             data-shinyattributes="inputId = &quot;$id$&quot;, label = &quot;$label$&quot;$value_str$$width_str$"
             data-shinyfunction="sliderInput">
            <label class="control-label">$label$</label>
            <input class="js-range-slider"
                   data-data-type="$format$" data-skin="shiny" data-grid="true" data-grid-num="10"
                   data-grid-snap="false" data-prettifyed-enabled="true" data-prettifyed-separator=","
                   data-keyboard="true" $range_attr$ data-time-format="$time_format$"
                   data-step="$step$" data-min="$min$" data-max="$max$" data-from="$from$">
        </div>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateType();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("slider") : id;
    const format = $("#sidebar-type").val();
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    const ranged = document.getElementById("sidebar-range").checked;
    const values = this.getValues(format, ranged);
    const range_attr = ranged ? `data-type="double" data-drag-interval="true" data-to="$to$"` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      range_attr,
      id,
      label,
      format,
      min: values.min,
      max: values.max,
      step: values.step,
      from: values.from,
      to: values.to,
      style_str,
      width_str,
      value_str: values.value_str,
      time_format: values.time_format
    });
  }
  getValues(format, range = false) {
    if (format === "number") {
      return {
        step: 1,
        min: 0,
        max: 10,
        from: 5,
        to: 7,
        value_str: `, min = 0, max = 10, value = ${range ? "c(5, 7)" : 5}`
      };
    }
    let curr_time, curr_date = new Date();
    if (format === "date") {
      curr_date.setHours(0, 0, 0, 0);
    }
    const step = format === "date" ? 1e3 * 60 * 60 * 24 : 1e3;
    curr_time = curr_date.getTime();
    const min = curr_time - 5 * step;
    const max = curr_time + 5 * step;
    const from = curr_time;
    const to = curr_time + 2 * step;
    const r_datefunc = format === "date" ? "Sys.Date()" : "Sys.time()";
    const r_mult = format === "date" ? "" : "000";
    const input_value_str = range ? `"c(${r_datefunc}, ${r_datefunc} + 2${r_mult})"` : r_datefunc;
    return {
      step,
      min,
      max,
      from,
      to,
      time_format: format === "date" ? "%F" : "%F %T",
      value_str: `, min = ${r_datefunc} - 5${r_mult}, max = ${r_datefunc} + 5${r_mult}, value = ${input_value_str}`
    };
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    const slider_type = $("#sidebar-type").val();
    $(".component-container").find("input").ionRangeSlider({ prettify: this.getSliderPrettifier(slider_type) });
  }
  getSliderPrettifier(type) {
    if (type === "date") {
      return function(num) {
        var sel_date = new Date(num);
        console.log(sel_date);
        return sel_date.getFullYear() + "-" + (sel_date.getMonth() + 1) + "-" + sel_date.getDate();
      };
    } else if (type === "datetime") {
      return function(num) {
        var sel_date = new Date(num);
        console.log(sel_date);
        return sel_date.getFullYear() + "-" + (sel_date.getMonth() + 1) + "-" + sel_date.getDate() + " " + sel_date.getHours() + ":" + sel_date.getMinutes() + ":" + sel_date.getSeconds();
      };
    } else {
      return null;
    }
  }
};

// component/Button.js
var Button = class extends Component {
  name = "Button";
  parameters = ["type", "id", "label", "download", "width"];
  types = [
    { value: "default", label: "Default", css_class: "btn-default" },
    { value: "primary", label: "Primary", css_class: "btn-primary" },
    { value: "secondary", label: "Secondary", css_class: "btn-secondary" },
    { value: "success", label: "Success", css_class: "btn-success" },
    { value: "danger", label: "Danger", css_class: "btn-danger" },
    { value: "warning", label: "Warning", css_class: "btn-warning" },
    { value: "info", label: "Info", css_class: "btn-info" },
    { value: "light", label: "Light", css_class: "btn-light" },
    { value: "dark", label: "Dark", css_class: "btn-dark" }
  ];
  html = `
        <button class="btn $btn_class$ action-button designer-element"
                type="button" $style_str$
                data-shinyfunction="$r_func$"
                data-shinyattributes="$id_arg$ = &quot;$id$&quot;$class_str$$width_str$">
            $download_icon$
            $label$
        </button>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateType();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("width", "");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("input") : id;
    const input_type = $("#sidebar-type").val();
    const input_info = this.types.find((x) => x.value === input_type);
    if (!input_info)
      return;
    const btn_class = input_info.css_class;
    const class_str = input_type === "default" ? "" : `, class = &quot;${btn_class}&quot;`;
    const downloadable = document.getElementById("sidebar-download").checked;
    const r_func = downloadable ? "downloadButton" : "actionButton";
    const download_icon = downloadable ? `<i class="fa fa-download" role="presentation" aria-label="download icon"></i>` : "";
    const id_arg = downloadable ? "outputId" : "inputId";
    const width = this.validateCssUnit($("#sidebar-width").val());
    const style_str = width ? `width: ${width};` : "";
    const width_str = width ? `, width = &quot;${width}&quot;` : "";
    return this.replaceHTMLPlaceholders(this.html, {
      id,
      id_arg,
      label,
      r_func,
      download_icon,
      btn_class,
      class_str,
      style_str,
      width_str
    });
  }
};

// component/Output.js
var Output = class extends Component {
  name = "Output";
  parameters = ["type", "plot", "id", "label", "inline", "textarea", "width", "height"];
  types = [
    { value: "text", label: "Text", css_class: "text-output-element shiny-text-output", r_func: "textOutput", placeholder: "Text Output: " },
    { value: "verbatim", label: "Verbatim Text", css_class: "verbatimtext-output-element shiny-text-output", r_func: "verbatimTextOutput", placeholder: "Verbatim Text Output: " },
    { value: "plot", label: "Plot", css_class: "plot-output-element shiny-plot-output", r_func: "plotOutput" },
    { value: "image", label: "Image", css_class: "image-output-element shiny-image-output", r_func: "imageOutput" },
    { value: "table", label: "Table", css_class: "table-output-element shiny-datatable-output", r_func: "DT::DTOutput" },
    { value: "html", label: "HTML", css_class: "html-output-element shiny-html-output", r_func: "uiOutput", placeholder: "Placeholder for HTML Output" }
  ];
  notes = [
    "Plot and image output will show area of plot, but image will not stretch to fit"
  ];
  html = `
        <$html_tag$ $id_str$ class="designer-element output-element $css_class$"
            style="$style_str$"
            data-shinyfunction="$r_func$"
            data-shinyattributes="outputId = &quot;$id$&quot;$inline_str$$dim_str$">
            $output_tag$
        </$html_tag$>
    `;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateType();
    this.updateTextInput("id", "");
    this.updateTextInput("label", "Label");
    this.updateTextInput("height", "400px");
    this.updateTextInput("width", "100%");
    this.updateLabel("id", "Output ID");
  }
  createComponent() {
    const label = $("#sidebar-label").val();
    let id = $("#sidebar-id").val();
    id = id === "" ? this.createID("output") : id;
    const output_type = $("#sidebar-type").val();
    const output_info = this.types.find((x) => x.value === output_type);
    if (!output_info)
      return;
    const r_func = output_info.r_func;
    let html_tag = output_type === "verbatim" ? "pre" : "div";
    const css_class = output_info.css_class;
    let id_str = "";
    if (["plot", "image", "table"].includes(output_type)) {
      const designer_id = this.createID("output");
      Shiny.setInputValue("sidebar-outputid", designer_id);
      id_str = `id="sidebar-${designer_id}"`;
    }
    const inline = document.getElementById("sidebar-inline").checked;
    const inline_str = inline && !["verbatim", "table"].includes(output_type) ? ", inline = TRUE" : "";
    if (inline_str !== "") {
      html_tag = "span";
    }
    let dim_str = "";
    let style_str = "";
    if (["plot", "image"].includes(output_type)) {
      const width = this.validateCssUnit($("#sidebar-width").val(), "100%");
      let style_str2 = `width: ${width};`;
      let dim_str2 = width === "100%" ? "" : `, width = &quot;${width}&quot;`;
      const height = this.validateCssUnit($("#sidebar-height").val(), "400px");
      style_str2 = style_str2 + ` height: ${height};`;
      dim_str2 = dim_str2 + (height === "400px" ? "" : `, height = &quot;${height}&quot;`);
    }
    let output_tag = "";
    if (output_info.placeholder) {
      if (output_type === "html") {
        output_tag = `<span>${output_info.placeholder}</span>`;
      } else {
        output_tag = `<span>${output_info.placeholder} ${$("#sidebar-textarea").val()}</span>`;
      }
    }
    return this.replaceHTMLPlaceholders(this.html, {
      html_tag,
      id,
      label,
      id_str,
      r_func,
      css_class,
      style_str,
      dim_str,
      inline_str,
      output_tag
    });
  }
  updateComponent(update_sortable = false) {
    super.updateComponent(update_sortable);
    Shiny.bindAll();
  }
};

// component/Tab.js
var Tab = class extends Component {
  _item = 1;
  name = "Tab";
  constructor() {
    super();
    $("#component_settings").css("display", "none");
    $("#tab_settings").css("display", "");
  }
  updateComponent() {
  }
  getPageType() {
    return $("#settings-page_type input:radio:checked").val();
  }
  addPage() {
    const page_type = this.getPageType();
    const tab_name = $("#sidebar-tab_name").val();
    if (this.checkDuplicateNames(tab_name, page_type)) {
      return;
    }
    let tab_value2 = $("#sidebar-tab_value").val();
    if (tab_value2 === "") {
      tab_value2 = this.createID("tab");
    }
    if (this.checkDuplicateIDs(tab_value2, page_type)) {
      return;
    }
    $("#sidebar-tab_alert div").alert("close");
    if (page_type === "dashboardPage") {
      this.addMenuItem(tab_name, tab_value2);
    } else {
      this.addTab(tab_name, tab_value2);
    }
  }
  addTab(tab_name, tab_value2) {
    const nav_panel = $("ul.navbar-nav");
    const nav_id = nav_panel.data("tabsetid");
    const tab_panel = $(".tab-content");
    const active_class = tab_panel.html() === "" ? "active" : "";
    nav_panel.append(`
            <li class="${active_class}">
                <a href="#tab-${nav_id}-${this._item}" data-toggle="tab"
                   data-bs-toggle="tab" data-value="${tab_value2}" data-name="${tab_name}">${tab_name}</a>
            </li>
        `);
    tab_panel.append(`
            <div class="tab-pane ${active_class}" data-value="${tab_value2}" id="tab-${nav_id}-${this._item}"
                 data-shinyfunction="tabPanel" data-shinyattributes="title = &quot;${tab_name}&quot;, value = &quot;${tab_value2}&quot;"></div>
        `);
    this.enableSortablePage(`tab-${nav_id}-${this._item}`);
    this._item = this._item + 1;
  }
  addMenuItem(tab_name, tab_value2) {
    const tab_panel = $("section.content .tab-content");
    const active_class = tab_panel.html() === "" ? "active" : "";
    $(".sidebarMenuSelectedTabItem").before(`
            <li class="nav-item" data-shinyfunction="bs4Dash::menuItem"
                data-shinyattributes="text = &quot;${tab_name}&quot;, tabName = &quot;${tab_value2}&quot;">
                <a class="nav-link ${active_class}" id="tab-${tab_value2}" href="#"
                   data-toggle="tab" data-target="#shiny-tab-${tab_value2}"
                   data-value="${tab_value2}" data-name="${tab_name}">
                    <p>${tab_name}</p>
                </a>
            </li>
        `);
    if (!$(".sidebarMenuSelectedTabItem").attr("data-value")) {
      $(".sidebarMenuSelectedTabItem").attr("data-value", tab_value2);
    }
    tab_panel.append(`
            <div role="tabpanel" data-value="${tab_value2}" id="shiny-tab-${tab_value2}"
                 class="tab-pane container-fluid ${active_class}"
                    data-shinyfunction="bs4Dash::tabItem" data-shinyattributes="tabName = &quot;${tab_value2}&quot;"></div>
        `);
    this.enableSortablePage(`shiny-tab-${tab_value2}`);
  }
  enableSortablePage(id) {
    Sortable.create(document.getElementById(id), {
      group: {
        name: "shared",
        put: function(_to, _from, clone) {
          return !clone.classList.contains("col-sm");
        }
      }
    });
  }
  checkDuplicateNames(tab_name, page_type) {
    if ($(this.getNameIdentifier(tab_name, page_type)).length > 0) {
      $("#sidebar-tab_alert").html(`
                <div class="alert alert-danger" role="alert">
                    ${tab_name} is the name of an existing menu item. Please choose a unique name
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    } else {
      return false;
    }
  }
  getNameIdentifier(tab_name, page_type) {
    if (page_type === "dashboardPage") {
      return `ul.sidebar-menu a[data-name='${tab_name}']`;
    } else {
      return `ul.navbar-nav a[data-name='${tab_name}']`;
    }
  }
  checkDuplicateIDs(tab_name, page_type) {
    if ($(this.getValueIdentifier(tab_name, page_type)).length > 0) {
      $("#sidebar-tab_alert").html(`
                <div class="alert alert-danger" role="alert">
                    ${tab_value} is the ID of an existing menu item. Please choose a unique ID
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return true;
    } else {
      return false;
    }
  }
  getValueIdentifier(tab_value2, page_type) {
    if (page_type === "dashboardPage") {
      return `ul.sidebar-menu a[data-value='${tab_value2}']`;
    } else {
      return `ul.navbar-nav a[data-value='${tab_value2}']`;
    }
  }
  deletePage() {
    const page_type = this.getPageType();
    const tab_name = $("#sidebar-tab_name").val();
    if (!this.checkExistingNames(tab_name, page_type)) {
      return true;
    }
    $("#sidebar-tab_alert div").alert("close");
    if (page_type === "dashboardPage") {
      this.deleteMenuItem(tab_name);
    } else {
      this.deleteTab(tab_name);
    }
  }
  deleteTab(tab_name) {
    const tab_value2 = $(`ul.nav a[data-name='${tab_name}']`).data("value");
    $(`ul.nav a[data-name='${tab_name}']`).parent().remove();
    $(`.tab-content .tab-pane[data-value='${tab_value2}']`).remove();
  }
  deleteMenuItem(tab_name) {
    const tab_value2 = $(`ul.nav a[data-name='${tab_name}']`).data("value");
    $(`#tab-${tab_value2}`).parent().remove();
    $(`#shiny-tab-${tab_value2}`).remove();
  }
  checkExistingNames(tab_name, page_type) {
    if ($(this.getNameIdentifier(tab_name, page_type)).length > 0) {
      return true;
    } else {
      $("#sidebar-tab_alert").html(`
                <div class="alert alert-danger" role="alert">
                    Unable to find a tab with the name "${tab_name}"
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `);
      return false;
    }
  }
};

// component/utils.js
function getComponent(name) {
  if (name === "header") {
    return new Header();
  } else if (name === "row") {
    return new Row();
  } else if (name === "column") {
    return new Column();
  } else if (name === "text") {
    return new Text();
  } else if (name === "input_panel") {
    return new InputPanel();
  } else if (name === "input") {
    return new Input();
  } else if (name === "dropdown") {
    return new SelectInput();
  } else if (name === "file") {
    return new FileInput();
  } else if (name === "date") {
    return new DateInput();
  } else if (name === "checkbox") {
    return new CheckboxInput();
  } else if (name === "radio") {
    return new CheckboxGroupInput();
  } else if (name === "slider") {
    return new SliderInput();
  } else if (name === "button") {
    return new Button();
  } else if (name === "output") {
    return new Output();
  } else if (name === "tab_panel") {
    return new Tab();
  }
  return new Header();
}

// component/init.js
var component;
function initComponents() {
  component = new getComponent("header");
  component.updateComponent(true);
  $(".component-settings").on("change keyup", () => {
    if (component.name !== "Tab")
      component.updateComponent();
  });
  $(".component-comments").on("change blur", () => {
    if (component.name !== "Tab")
      component.updateComponent();
  });
  $(".component-container").on("mouseover", () => {
    $(":focus").trigger("blur");
  });
  $("#sidebar-tab_add").on("click", () => component.addPage());
  $("#sidebar-tab_delete").on("click", () => component.deletePage());
  $("#settings-component .dropdown-item").on("click", (el) => {
    component = new getComponent($(el.target).data("shinyelement"));
    component.updateComponent(true);
    $("#settings-component .dropdown-item").removeClass("active");
    $(el.target).addClass("active");
  });
}

// app/index.js
$(function() {
  initPage();
  initComponents();
  initSettings();
  $(".help-icon").tooltip({ boundary: "window", placement: "right" });
  Sortable.create(document.getElementById("sidebar-bin"), {
    group: {
      name: "shared",
      pull: false
    },
    handle: ".designer-element",
    draggable: ".designer-element",
    onAdd: function(evt) {
      this.el.removeChild(evt.item);
    }
  });
});
//# sourceMappingURL=designer.min.js.map
