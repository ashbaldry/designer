// page/Page.js
var Page = class {
  navbar_item_style = "none";
  bs4_item_style = "none";
  enable_on_load = true;
  page_html;
  constructor() {
  }
  updateComponentDropdown() {
    $(".navbar-tab-item").css("display", this.navbar_item_style);
    $(".bs4-item").css("display", this.bs4_item_style);
    if (this.navbar_item_style === "none") {
      $("#settings-component a[name='header']").trigger("click");
    } else {
      $("#settings-component a[name='tab_panel']").trigger("click");
    }
  }
  getPageHTML(html, title = "") {
    return html.replaceAll("$page_id$", this.getTabID()).replaceAll("$title$", title);
  }
  updatePage() {
    const title = $("#canvas-title").html();
    $(".page-canvas").html(this.getPageHTML(this.page_html, title));
  }
  enableSortablePage(id) {
    Sortable.create(document.getElementById(id), {
      group: {
        name: "shared",
        put: function(_to, _from, clone) {
          return !clone.classList.contains("col-sm");
        }
      }
    });
  }
  getTabID() {
    return Math.round(Math.random() * 8999 + 1e3);
  }
};

// page/BasicPage.js
var BasicPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" data-shinyfunction="basicPage"></div>
    `;
};

// page/FillPage.js
var FillPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template" 
             data-shinyfunction="fillPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/FluidPage.js
var FluidPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" 
             data-shinyfunction="fluidPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/BootstrapPage.js
var BootstrapPage = class extends Page {
  page_html = `
        <div id="canvas-page" class="designer-page-template container-fluid" 
             data-shinyfunction="bootstrapPage"
             data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
    `;
};

// page/NavbarPage.js
var NavbarPage = class extends Page {
  navbar_item_style = "";
  enable_on_load = false;
  page_html = `
        <div class="designer-page-template">
            <nav class="navbar navbar-default navbar-static-top" role="navigation">
                <div class="container-fluid">
                    <div class="navbar-header">
                        <span class="navbar-brand">$title$</span>
                    </div>
                    <ul class="nav navbar-nav" data-tabsetid="$page_id$"></ul>
                </div>
            </nav>
            <div class="container-fluid navbar-page-tabs">
                <div id="canvas-page" class="tab-content"
                     data-tabsetid="$page_id$" data-shinyfunction="navbarPage"
                     data-shinyattributes="title = &quot;$title$&quot;, theme = bslib::bs_theme(4)"></div>
            </div>
        </div>
    `;
};

// page/DashboardPage.js
var DashboardPage = class extends Page {
  navbar_item_style = "";
  bs4_item_style = "";
  enable_on_load = false;
  page_html = `
        <div id="canvas-page" class="wrapper designer-page-template"
             data-shinyfunction="bs4Dash::dashboardPage" data-shinyattributes="title = &quot;$title$&quot;">
            <nav data-fixed="false" class="main-header navbar navbar-expand navbar-white navbar-light"
                 data-shinyfunction="bs4Dash::dashboardHeader" data-shinyattributes="title = &quot;$title$&quot;">
                <ul class="navbar-nav">
                    <a class="nav-link" data-widget="pushmenu" href="#">
                        <i class="fa fa-bars" role="presentation" aria-label="bars icon"></i>
                    </a>
                </ul>
                <ul class="navbar-nav ml-auto navbar-right"></ul>
            </nav>
            <aside id="sidebarId" data-fixed="true" data-minified="true" data-collapsed="false"
                   data-disable="FALSE" class="main-sidebar sidebar-dark-primary elevation-4"
                   data-shinyfunction="bs4Dash::dashboardSidebar">
                <div class="brand-link">$title$</div>
                <div class="sidebar" id="sidebarItemExpanded">
                    <nav class="mt-2">
                        <ul class="nav nav-pills nav-sidebar flex-column sidebar-menu nav-child-indent"
                            data-widget="treeview" role="menu" data-accordion="true" data-shinyfunction="bs4Dash::sidebarMenu">
                            <div id="tabs_$page_id$" class="sidebarMenuSelectedTabItem"></div>
                        </ul>
                    </nav>
                </div>
            </aside>
            <div class="content-wrapper" data-shinyfunction="bs4Dash::dashboardBody">
                <section class="content">
                    <div class="tab-content"></div>
                </section>
            </div>
        </div>
    `;
};

// page/utils.js
function createPage() {
  var page_type = $("#settings-page_type input:radio:checked").val();
  var page;
  if (page_type === "basicPage") {
    page = new BasicPage();
  } else if (page_type === "fillPage") {
    page = new FillPage();
  } else if (page_type === "fluidPage") {
    page = new FluidPage();
  } else if (page_type === "bootstrapPage") {
    page = new BootstrapPage();
  } else if (page_type === "navbarPage") {
    page = new NavbarPage();
  } else if (page_type === "dashboardPage") {
    page = new DashboardPage();
  } else {
    page = new BasicPage();
  }
  page.updatePage();
  if (page.enable_on_load) {
    page.enableSortablePage("canvas-page");
  }
  page.updateComponentDropdown();
  return page;
}
function changePageCheck() {
  if ($("#canvas-page").html() === "") {
    $("#canvas-page").html("<div></div>");
    createPage();
  } else {
    $("#warning_modal").modal();
  }
}
function updateTitle(el) {
  const title = $(el.target).val();
  $("#canvas-title").html(title);
  $(".navbar-brand").html(title);
  $(".brand-link").html(title);
  if ($("#canvas-page").data("shinyattributes")) {
    var shiny_atts = $("#canvas-page").data("shinyattributes").replace(/"[^"]+"/, `"${title}"`);
    $("#canvas-page").attr("data-shinyattributes", shiny_atts);
  }
  if ($("#canvas-page>.main-header").data("shinyattributes")) {
    var shiny_atts2 = $("#canvas-page>.main-header").data("shinyattributes").replace(/"[^"]+"/, `"${title}"`);
    $("#canvas-page>.main-header").attr("data-shinyattributes", shiny_atts2);
  }
}

// page/init.js
function initPage() {
  createPage();
  $("#settings-page_type").on("change", changePageCheck);
  $("#confirm_reset").on("click", createPage);
  $("#app_name").on("change keyup", updateTitle);
}

// app/settings.js
function initSettings() {
  $(".copy-ui-button").on("click", copyUICode);
  $("#remove_label").on("change", toggleComponentLabels);
  $("#remove_colour").on("change", toggleBackgroundColours);
  $("#remove_border").on("change", toggleBorders);
  $(document).on("click", ".clickable-dropdown", (e) => {
    e.stopPropagation();
  });
  $("#preview").on("click", () => {
    $(".page-canvas-shell").addClass("preview");
  });
  $("#canvas-close_preview").on("click", () => {
    $(".page-canvas-shell").removeClass("preview");
  });
}
function toggleComponentLabels() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-after-label");
  } else {
    $(".designer-page-template").addClass("hidden-after-label");
  }
}
function toggleBackgroundColours() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-colour");
  } else {
    $(".designer-page-template").addClass("hidden-colour");
  }
}
function toggleBorders() {
  if (this.checked) {
    $(".designer-page-template").removeClass("hidden-borders");
  } else {
    $(".designer-page-template").addClass("hidden-borders");
  }
}
function copyUICode() {
  var copy_text = document.getElementById("settings-code-code").textContent;
  navigator.clipboard.writeText(copy_text);
  return;
}

// component/Component.js
var Component = class {
  updatable = true;
  name;
  parameters;
  tags;
  notes;
  sortable_settings;
  html;
  constructor() {
  }
  showRelevantOptions() {
    $(".component-settings").css("display", "");
    for (let i = 0; i < this.parameters.length; i++) {
      $(".component-settings[data-component= '" + this.parameters[i] + "']").css("display", "unset");
    }
  }
  createComponent() {
    return this.html;
  }
  replaceHTMLPlaceholders(html, options) {
    for (const property in options) {
      html = html.replaceAll("$" + property + "$", options[property]);
    }
    return html;
  }
  updateComponent(update_sortable = false) {
    $(".component-container").html(null);
    const html = this.createComponent();
    $(".component-container").html(html);
    this.addComments();
    if (update_sortable) {
      this.enableSortable();
    }
  }
  enableSortable() {
    Sortable.create(document.getElementById("sidebar-container"), {
      group: {
        name: "shared",
        pull: "clone",
        put: false
      },
      onClone: function(evt) {
        if (component.sortable_settings) {
          Sortable.create(evt.item, component.sortable_settings);
        }
      },
      onEnd: function(_evt) {
        $('.page-canvas [data-toggle="tooltip"]').tooltip();
        if (component.updatable || $("#sidebar-comments").val() !== "") {
          $("#sidebar-comments").val("");
          component.updateComponent();
        }
      }
    });
  }
  addComments() {
    const comments = $("#sidebar-comments").val();
    if (comments) {
      $(".component-container>.designer-element").attr("data-shinycomments", comments);
      $(".component-container>.designer-element").attr("title", comments);
      $(".component-container>.designer-element").attr("data-toggle", "tooltip");
    }
  }
  updateTag() {
    if (this.tags) {
      var selectize = $("#sidebar-tag").selectize()[0].selectize;
      selectize.clearOptions(true);
      selectize.addOption(this.tags);
      selectize.refreshOptions(false);
      selectize.addItem(this.tags[0].value);
    }
  }
  updateText(text) {
    $("#sidebar-text").val(text);
  }
  createID(prefix = "") {
    prefix = prefix ? prefix + "_" : prefix;
    return prefix + Math.random().toString(36).substring(2, 12);
  }
  validateCssUnit(x, fallback) {
    if (this._regex.test(x)) {
      return x;
    } else if (/^\d+$/.test(x)) {
      return x + "px";
    } else {
      return fallback;
    }
  }
  _regex = /^(auto|inherit|fit-content|calc\(.*\)|((\.\d+)|(\d+(\.\d+)?))(%|in|cm|mm|ch|em|ex|rem|pt|pc|px|vh|vw|vmin|vmax))$/;
};

// component/Header.js
var Header = class extends Component {
  name = "header";
  parameters = ["tag", "text"];
  tags = [
    { value: "h1", label: "h1", text: "h1" },
    { value: "h2", label: "h2", text: "h2" },
    { value: "h3", label: "h3", text: "h3" },
    { value: "h4", label: "h4", text: "h4" },
    { value: "h5", label: "h5", text: "h5" },
    { value: "h6", label: "h6", text: "h6" }
  ];
  html = `<$tag$ class="designer-element" data-shinyfunction="$tag$">$value$</$tag$>`;
  constructor() {
    super();
    this.showRelevantOptions();
    this.updateTag();
    this.updateText("Header");
  }
  createComponent() {
    const tag = $("#sidebar-tag").val();
    const value = $("#sidebar-text").val();
    return this.replaceHTMLPlaceholders(this.html, { tag, value });
  }
};

// component/Row.js
var Row = class extends Component {
  name = "row";
  parameters = [];
  html = `<div class="designer-element row row-designer" data-shinyfunction="fluidRow"></div>`;
  updatable = false;
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return clone.classList.contains("col-sm");
      }
    }
  };
  constructor() {
    super();
    this.showRelevantOptions();
  }
};

// component/Column.js
var Column = class extends Component {
  name = "column";
  parameters = ["width_num", "offset"];
  html = `
        <div class="designer-element col-sm col-sm-$width$$offset_class$"
             data-shinyfunction="column"
             data-shinyattributes="width = $width$$offset_r$"></div>
    `;
  updatable = false;
  sortable_settings = {
    group: {
      name: "shared",
      put: function(_to, _from, clone) {
        return !clone.classList.contains("col-sm");
      }
    }
  };
  constructor() {
    super();
    this.showRelevantOptions();
  }
  createComponent() {
    const width = $("#sidebar-width_num").val();
    const offset = $("#sidebar-offset").val();
    var offset_class = offset > 0 ? ` offset-md-${offset}` : "";
    var offset_r = offset > 0 ? `, offset = ${offset}` : "";
    return this.replaceHTMLPlaceholders(this.html, { width, offset_class, offset_r });
  }
};

// component/utils.js
function getComponent(name, update = true) {
  if (name === "header") {
    return new Header(update);
  } else if (name === "row") {
    return new Row(update);
  } else if (name === "column") {
    return new Column(update);
  } else {
    return new Header(update);
  }
}

// component/init.js
var component;
function initComponents() {
  component = new getComponent("header");
  component.updateComponent(true);
  $(".component-parameters").on("change keyup", () => component.updateComponent());
  $(".component-comments").on("change blur", () => component.updateComponent());
  $(".component-container").on("mouseover", () => {
    $(":focus").trigger("blur");
  });
  $("#settings-component .dropdown-item").on("click", (el) => {
    component = new getComponent($(el.target).data("shinyelement"));
    component.updateComponent(true);
    $("#settings-component .dropdown-item").removeClass("active");
    $(el.target).addClass("active");
  });
}

// app/index.js
$(function() {
  initPage();
  initComponents();
  initSettings();
  $(".help-icon").tooltip({ boundary: "window", placement: "right" });
  Sortable.create(document.getElementById("sidebar-bin"), {
    group: {
      name: "shared",
      pull: false
    },
    handle: ".designer-element",
    draggable: ".designer-element",
    onAdd: function(evt) {
      this.el.removeChild(evt.item);
    }
  });
});
//# sourceMappingURL=designer.min.js.map
